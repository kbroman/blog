<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>the stupidest thing...</title>
    <link>https://kbroman.org/blog/</link>
    <description>Recent content on the stupidest thing...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>The text in this work is licensed under CC-BY-4.0, https://creativecommons.org/licenses/by/4.0/legalcode; code licensed under the MIT License</copyright>
    <lastBuildDate>Fri, 05 Oct 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kbroman.org/blog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Twitter break</title>
      <link>https://kbroman.org/blog/2018/10/05/twitter-break/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2018/10/05/twitter-break/</guid>
      <description>&lt;p&gt;What I’ve liked most about Twitter is that it’s helped me to feel less isolated, as I’ve been able to connect with distant folks who share my interests and values, particularly regarding open science and reproducible research.&lt;/p&gt;
&lt;p&gt;But somehow, lately, Twitter had me feeling less rather than more connected. I think maybe it’s been that conference effect: scientific conferences are great for catching up with old friends and seeing all of the cool things that everyone’s doing, but ultimately they often leave me feeling like crap because everyone else seems to be doing cool and exciting stuff while I gave a talk on the same old stuff I’ve been working on for five years with little apparent progress.&lt;/p&gt;
&lt;p&gt;So I took a two-month break from Twitter. But I can’t say that I really felt better for it. And going back I see I’ve missed like 100 tweets about my &lt;a href=&#34;https://doi.org/10.1080/00031305.2017.1375989&#34;&gt;paper&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/kara_woo&#34;&gt;Kara Woo&lt;/a&gt; on &lt;a href=&#34;https://doi.org/10.1080/00031305.2017.1375989&#34;&gt;data organization in spreadsheets&lt;/a&gt;. And I was mentioned among &lt;a href=&#34;https://news.wisc.edu/uws-most-interesting-twitter-accounts-you-need-to-follow/&#34;&gt;UW-Madison’s most interesting Twitter accounts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I’m coming back to Twitter, but maybe in a more scaled-back way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning a new programming language</title>
      <link>https://kbroman.org/blog/2018/03/16/learning-a-new-programming-language/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2018/03/16/learning-a-new-programming-language/</guid>
      <description>&lt;p&gt;I’ve long been an advocate for statisticians (and other data scientists) to become proficient in multiple programming languages. Fifteen years ago, I said, “Think CPR: C for speed, R for interactive data analysis and graphics, and Perl for manipulating data files.” I’d now substitute C++ for C, and &lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; or &lt;a href=&#34;https://www.ruby-lang.org/en&#34;&gt;Ruby&lt;/a&gt; for Perl, but the general sentiment stands: use the language that best fits the problem at hand.&lt;/p&gt;
&lt;div id=&#34;more-blather-about-languages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More blather about languages&lt;/h2&gt;
&lt;p&gt;Long ago, I wrote a &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/perlintro/&#34;&gt;tutorial on Perl&lt;/a&gt;. I’d intended to also write tutorials on C and R, but never got around to them and just wrote resources pages (see &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/Cintro/&#34;&gt;Intro to C&lt;/a&gt; and &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/Rintro/&#34;&gt;Intro to R&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My Perl code was always terrible: “read-only”, one-off scripts to convert data files from one format to another. I much prefer Ruby, but my Ruby coding involves a whole lot of googling. Python is more popular, and so I’d recommend that to you. (But I really don’t like the handling of regular expression in Python, and that’s like the main thing I want from that sort of language, so I’m sticking with Ruby for data file manipulation.) And these days, what with the whole &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; developments, you can probably get by with R alone, for data file manipulation.&lt;/p&gt;
&lt;p&gt;Still, sometimes a problem requires you to bring out the big guns. For lots of problems, my most pristine R code won’t be nearly as fast as my sloppiest C or C++ code. So to be fully self-sufficient, I think you want to be able to switch to a lower-level, super efficient (for calculations, not for writing the code) language. Many would advocate for &lt;a href=&#34;https://julialang.org&#34;&gt;Julia&lt;/a&gt; as a way to have one language that is simultaneously easy, readable, and fast. But I still believe in switching between languages (C++ for speed and R for interactive data analysis and graphics, and maybe data file manipulation, though I still prefer to switch again to Ruby).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://thebird.nl/&#34;&gt;Pjotr Prins&lt;/a&gt; had me writing &lt;a href=&#34;https://dlang.org/&#34;&gt;D&lt;/a&gt; for a while, and he continues to advocate for it. And boy was I ever glad to switch from C to C++ and from &lt;code&gt;.C()&lt;/code&gt; to &lt;a href=&#34;http://www.rcpp.org/&#34;&gt;Rcpp&lt;/a&gt;. html and CSS go without saying. And we should probably add JavaScript, or something that compiles to JavaScript. (I like &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;; in fact, CoffeeScript is probably my favorite language, presently.)&lt;/p&gt;
&lt;p&gt;There was also SQL and MongoDB in there, for me. Data scientists need to be comfortable with accessing formal databases.&lt;/p&gt;
&lt;p&gt;I’m now trying to learn &lt;a href=&#34;http://www.purescript.org/&#34;&gt;PureScript&lt;/a&gt;, but I’m finding it heavy going and so am taking a detour into &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; for a bit, to try to get the basics of the “purely functional programming” business. But I intend to then go back to PureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-learn-programming-language&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to learn programming language&lt;/h2&gt;
&lt;p&gt;Anyway, that was a bit too much of a blathery introduction to say: I think it’s good to learn multiple programming languages, and in having tried to do so myself, I’ve got some suggestions about how to go about it (the learning), which might be useful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set aside substantial and regular blocks of time.&lt;/li&gt;
&lt;li&gt;Buy a good book. Or buy all the books.&lt;/li&gt;
&lt;li&gt;Have a particular goal/application in mind.&lt;/li&gt;
&lt;li&gt;Develop a script, with notes, illustrating key language features you’ve learned.&lt;/li&gt;
&lt;li&gt;Force yourself to use your new skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;set-aside-substantial-and-regular-blocks-of-time.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set aside substantial and regular blocks of time.&lt;/h2&gt;
&lt;p&gt;Learning a new programming language takes time and regular practice. And you really need blocks of 2-4 hours, because if you’ve not touched the language in a week, it’ll take you 30 minutes to get yourself back into it. (What were you doing? What had you learned? What did you want to look at next?) You need a chunk of a couple of hours so you can get yourself back into it and then make a bit of progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;buy-a-book.-or-buy-all-the-books.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Buy a book. Or buy all the books.&lt;/h2&gt;
&lt;p&gt;I recommend finding a good book and following along. Actually, I tend to buy &lt;em&gt;all&lt;/em&gt; the books. But you want at least one, maybe two. Which book is a matter of taste. I’m looking for something that is aimed at someone who can already program in something. But whether a book is the right one for me depends mostly on the types of examples that are used. After that is writing style and quality of explanations.&lt;/p&gt;
&lt;p&gt;For example, regarding Ruby, many people recommend &lt;a href=&#34;https://www.amazon.com/gp/product/1937785491?ie=UTF8&amp;amp;tag=7210-20&#34;&gt;&lt;em&gt;Programming Ruby&lt;/em&gt;&lt;/a&gt;, but personally I found the examples and the order of topics was just not a good fit for me. I much preferred &lt;a href=&#34;https://www.amazon.com/gp/product/0321584104?ie=UTF8&amp;amp;tag=7210-20&#34;&gt;&lt;em&gt;Eloquent Ruby&lt;/em&gt;&lt;/a&gt; and then &lt;a href=&#34;https://www.amazon.com/gp/product/1617291692?ie=UTF8&amp;amp;tag=7210-20&#34;&gt;&lt;em&gt;The Well-Grounded Rubyist&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll usually start by looking for something published by &lt;a href=&#34;https://www.oreilly.com&#34;&gt;O’Reilly&lt;/a&gt;; they’re uniformly good books. But in reality my favorite books are published by others: The best book (for &lt;em&gt;me&lt;/em&gt;) on a given language is likely not from O’Reilly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;have-a-particular-goalapplication-in-mind.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Have a particular goal/application in mind.&lt;/h2&gt;
&lt;p&gt;If you really want to make progress in learning a programming language, you need to move beyond the examples and exercises in a book and start using the language creatively to solve your own problems. Perhaps you have a particularly wonky data file that you want to parse and reorganize. Or maybe you want to write a web app that serves up local bus schedules. I like to switch back-and-forth between slowly developing an understanding of the language and its features, and then hacking away at something more substantial and &lt;em&gt;real&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;develop-a-script-with-notes.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Develop a script, with notes.&lt;/h2&gt;
&lt;p&gt;My key piece of advice: as you’re learning, develop a bit of a script with comments and other notes that illustrates the various language features that you’ve learned.&lt;/p&gt;
&lt;p&gt;First, you want to document the details of setting up the various language tools (compiler/interpreter and libraries and such) and how to keep them up-to-date. (This stuff is tedious, painful, and critical. So once you’ve figured it out, you’ll want a record of it so you don’t have to go through it again.) You can find various of my notes on this stuff in my &lt;a href=&#34;https://github.com/kbroman/ProgrammingNotes&#34;&gt;ProgrammingNotes repository&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;But most importantly, you want an informal script that you can quickly skim through or search, because you’ll forget stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do define a function in this language?&lt;/li&gt;
&lt;li&gt;What do I use to indicate comments?&lt;/li&gt;
&lt;li&gt;How do I concatenate two vectors?&lt;/li&gt;
&lt;li&gt;How do I search for an element in a vector?&lt;/li&gt;
&lt;li&gt;What was the syntax for list comprehensions again?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s all in that book that you bought, but it’s much easier to find that one thing you’re looking for in the succinct set of notes that you wrote yourself. Here are some examples of what I’ve done: for &lt;a href=&#34;https://github.com/kbroman/Pybroman&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/kbroman/Rubybroman&#34;&gt;Ruby&lt;/a&gt;, and &lt;a href=&#34;https://github.com/kbroman/JSbroman&#34;&gt;JavaScript/CoffeeScript&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;force-yourself-to-use-your-new-skills.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Force yourself to use your new skills.&lt;/h2&gt;
&lt;p&gt;Finally, if you really want to adopt the new programming language as part of your working toolkit, you’ll need to force yourself to actually use it in real life.&lt;/p&gt;
&lt;p&gt;There’ll come a time when you’ll say, “I should do this in Ruby. Nah, I could get it done in Perl in 15 minutes and it would take me two hours to do this in Ruby.” But you’ve got to force yourself to use the new language. In the short term, it’ll be easiest to switch back to the language you’re comfortable with, but if you want to make progress in the new language, you’ve got to put it into regular practice, and that won’t be easy. But it’ll get easier.&lt;/p&gt;
&lt;p&gt;Ultimately, you’ll have four or five languages floating around in your head and you’ll not remember how to define a function in any of them. And then you’ll be really cool.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>these guys</title>
      <link>https://kbroman.org/blog/2017/12/18/these-guys/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2017/12/18/these-guys/</guid>
      <description>&lt;p&gt;At the &lt;a href=&#34;https://ww2.amstat.org/meetings/jsm/2016/&#34;&gt;2016 JSM in Chicago&lt;/a&gt;, in a &lt;a href=&#34;https://ww2.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212769&#34;&gt;session honoring William Cleveland&lt;/a&gt;, a speaker’s repeated use of the phrase “these guys”, when referring to programmers, made me livid.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I’ve just become ACUTELY aware that we should not say “these guys” when referring to programmers or analysts in a talk. &lt;a href=&#34;https://twitter.com/hashtag/JSM2016?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#JSM2016&lt;/a&gt;&lt;/p&gt;&amp;mdash; Karl Broman (@kwbroman) &lt;a href=&#34;https://twitter.com/kwbroman/status/760881386651848708?ref_src=twsrc%5Etfw&#34;&gt;August 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;This led to considerable discussion about whether and how to respond, and ultimately Hadley Wickham and I wrote to the speaker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear S____,&lt;/p&gt;
&lt;p&gt;We attended your talk at JSM last week, in the session honoring Bill Cleveland.&lt;/p&gt;
&lt;p&gt;We, and a number of other audience members, were taken aback by your repeated use of the phrase “these guys” in your talk. The use of the word “guys” is often intended as gender-neutral, and we’re certain that you didn’t intend to deliberately imply that only men can be software developers and data analysts. However, our experience as audience members was that your repeated usage came across as rather exclusionary—characterizing programmers and analysts as exclusively men. Given that that was likely not your intent, we hope you’ll take it in consideration to change your language in the future.&lt;/p&gt;
&lt;p&gt;Regards, Karl Broman &amp;amp; Hadley Wickham&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We didn’t get a response.&lt;/p&gt;
&lt;p&gt;I think the lesson here is: don’t let these sorts of things go. &lt;a href=&#34;https://medium.com/@kristianlum/statistics-we-have-a-problem-304638dc5de5&#34;&gt;Tip of the %$*@-ing iceberg&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;update&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.science.smith.edu/~amcnamara/&#34;&gt;Amelia McNamara&lt;/a&gt; wrote &lt;a href=&#34;http://www.science.smith.edu/~amcnamara/blog/conferences/2017/12/19/On-Microaggressions.html&#34;&gt;an important follow up&lt;/a&gt; which you simply &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; go read. She fully characterizes the situation in a way that I didn’t.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Halloween 2017</title>
      <link>https://kbroman.org/blog/2017/10/31/halloween-2017/</link>
      <pubDate>Tue, 31 Oct 2017 20:05:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/10/31/halloween-2017/</guid>
      <description>&lt;p&gt;It was easier than ever to count trick-or-treaters this year; there were just 6 groups of kids, for a total of 18, and 12 of them came within 2 minutes (a group of 8 girls followed immediately by a group of 4 girls). Here’s a graph; compare it to &lt;a href=&#34;http://kbroman.org/blog/2016/10/31/halloween-2016-count/&#34;&gt;2016&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/blog/2011/10/31/halloween-2011-count/&#34;&gt;2011&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-10-31_halloween2017_files/figure-html/halloween_graph-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EOF within quoted string</title>
      <link>https://kbroman.org/blog/2017/08/08/eof-within-quoted-string/</link>
      <pubDate>Tue, 08 Aug 2017 00:10:12 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/08/08/eof-within-quoted-string/</guid>
      <description>&lt;p&gt;So I was trying to parse &lt;a href=&#34;http://www.informatics.jax.org/downloads/mgigff/MGI.20170803.gff3.gz&#34;&gt;this gff file&lt;/a&gt; from &lt;a href=&#34;http://www.informatics.jax.org/&#34;&gt;MGI&lt;/a&gt;, with mouse gene annotations. And, well, I’m an idiot. But in a way that is potentially instructive.&lt;/p&gt;
&lt;p&gt;The documentation for the file is a &lt;a href=&#34;http://www.informatics.jax.org/downloads/mgigff/MGI_GFF_Spec.docx&#34;&gt;docx file&lt;/a&gt; (not really a recommended format for such metadata), but it seems rather simple, really: tab delimited, with 9 columns, the ninth column being a bunch of pasted attributes that needs to be further parsed, but we’ll skip over that detail.&lt;/p&gt;
&lt;p&gt;I’d want to use &lt;code&gt;fread()&lt;/code&gt; from the &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki&#34;&gt;data.table package&lt;/a&gt;, but it turns out that the file has a bunch of lines with “&lt;code&gt;###&lt;/code&gt;” interspersed within the data, and I couldn’t see a way to skip over those in &lt;code&gt;fread()&lt;/code&gt;, so I fell back to the usual base R function, &lt;code&gt;read.table()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s first download and unzip the file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# download the file
site &amp;lt;- &amp;quot;http://www.informatics.jax.org/downloads/mgigff&amp;quot;
file &amp;lt;- &amp;quot;MGI.20170803.gff3.gz&amp;quot;
url &amp;lt;- paste0(site, &amp;quot;/&amp;quot;, file)
if(!file.exists(file)) download.file(url, file)

# unzip to a temporary file
file &amp;lt;- sub(&amp;quot;.gz$&amp;quot;, &amp;quot;&amp;quot;, file)
tmpfile &amp;lt;- tempfile()
remove_tmpfile &amp;lt;- FALSE
if(!file.exists(file)) { # need to unzip
    system(paste0(&amp;quot;gunzip -c &amp;quot;, file, &amp;quot;.gz &amp;gt; &amp;quot;, tmpfile))
    remove_tmpfile &amp;lt;- TRUE
    file &amp;lt;- tmpfile
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, now to read it into R with &lt;code&gt;read.table()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tab &amp;lt;- read.table(file, sep=&amp;quot;\t&amp;quot;, header=FALSE, comment.char=&amp;quot;#&amp;quot;,
                  na.strings=&amp;quot;.&amp;quot;, stringsAsFactors=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives a warning message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning message:
In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :
  EOF within quoted string&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm. What does that mean? Oh, no matter, let’s move on…&lt;/p&gt;
&lt;p&gt;Wait, there are no genes on chromosomes 5, 8, 15, 18, Y, or MT. How could that be? Something must be wrong with the file. Let’s look at another file at that site, &lt;a href=&#34;http://www.informatics.jax.org/downloads/mgigff/MGI.20160103.gff3.gz&#34;&gt;&lt;code&gt;MGI.20160103.gff3.gz&lt;/code&gt;&lt;/a&gt;. That one’s missing chromosomes 8 and 13.&lt;/p&gt;
&lt;p&gt;So I ask &lt;a href=&#34;https://www.jax.org/research-and-faculty/faculty/research-scientists/daniel-gatti&#34;&gt;Dan Gatti&lt;/a&gt;: “Hey, those files are corrupted. Who should I talk to about them?”&lt;/p&gt;
&lt;p&gt;And he’s like, “That’d be a disaster, but they look fine to me [parsed with &lt;code&gt;read.delim()&lt;/code&gt;].”&lt;/p&gt;
&lt;p&gt;So I tried using &lt;code&gt;read.delim()&lt;/code&gt; and sure enough, no warning, genes on all chromosomes, and about twice as many records. Oops.&lt;/p&gt;
&lt;div id=&#34;read.delim-vs-read.table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;read.delim()&lt;/code&gt; vs &lt;code&gt;read.table()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So what’s the difference between &lt;code&gt;read.delim()&lt;/code&gt; and &lt;code&gt;read.table()&lt;/code&gt;? Well, &lt;code&gt;read.delim()&lt;/code&gt; calls &lt;code&gt;read.table()&lt;/code&gt; with a particular set of default values for the arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; read.delim
function (file, header = TRUE, sep = &amp;quot;\\t&amp;quot;, quote = &amp;quot;\\&amp;quot;&amp;quot;, dec = &amp;quot;.&amp;quot;,
    fill = TRUE, comment.char = &amp;quot;&amp;quot;, ...)
read.table(file = file, header = header, sep = sep, quote = quote,
    dec = dec, fill = fill, comment.char = comment.char, ...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key argument here is &lt;code&gt;quote&lt;/code&gt;, in that &lt;code&gt;read.table()&lt;/code&gt; uses &lt;code&gt;quote=&amp;quot;&#39;\&amp;quot;&amp;quot;&lt;/code&gt; (that is, looking for either single- or double-quotes) while &lt;code&gt;read.delim()&lt;/code&gt; uses &lt;code&gt;quote=&amp;quot;\&amp;quot;&amp;quot;&lt;/code&gt; (just looking for double-quotes).&lt;/p&gt;
&lt;p&gt;There are no double-quotes in the file, but that ninth column includes some single-quotes, and so my use of &lt;code&gt;read.table()&lt;/code&gt; was mucking everything up. And presumably there was an odd number of them, so the end-of-file (EOF) character was inside one of those quoted strings.&lt;/p&gt;
&lt;p&gt;To read the file properly, I should have used &lt;code&gt;quote=&amp;quot;\&amp;quot;&amp;quot;&lt;/code&gt;. Even better, I could use &lt;code&gt;quote=&amp;quot;&amp;quot;&lt;/code&gt;, and for that matter also &lt;code&gt;fill=FALSE&lt;/code&gt; (since every line is supposed to contain all nine columns).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tab &amp;lt;- read.table(file, sep=&amp;quot;\t&amp;quot;, header=FALSE, comment.char=&amp;quot;#&amp;quot;,
                  na.strings=&amp;quot;.&amp;quot;, stringsAsFactors=FALSE,
                  quote=&amp;quot;&amp;quot;, fill=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;lessons&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Lessons&lt;/h2&gt;
&lt;p&gt;There are several lessons here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I shouldn’t have ignored the “&lt;code&gt;EOF within quoted string&lt;/code&gt;” warning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I should have compared the number of lines I read in with the number of lines in the input file. If I’d done so, I’d have seen that I had just about half as many lines as I should’ve, and so I’d clearly messed something up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When I run into a problem like this, it’s more likely that there’s a problem with my code than that there’s a problem with the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a file of this sort, I should have used &lt;code&gt;quote=&amp;quot;&amp;quot;&lt;/code&gt; and &lt;code&gt;fill=FALSE&lt;/code&gt; in my call to &lt;code&gt;read.table()&lt;/code&gt;. I’m not expecting any quoted fields, and I’m expecting that every line will have exactly nine columns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s good to have a friend like Dan.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>yay, yihui!</title>
      <link>https://kbroman.org/blog/2017/08/03/yay-yihui/</link>
      <pubDate>Thu, 03 Aug 2017 00:01:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/08/03/yay-yihui/</guid>
      <description>&lt;p&gt;When I abandoned my &lt;a href=&#34;https://kbroman.wordpress.com&#34;&gt;wordpress site&lt;/a&gt; and moved to &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown&lt;/a&gt;, &lt;a href=&#34;./2017/04/30/new_blog_site/&#34;&gt;I’d said&lt;/a&gt; that I wouldn’t bother trying to move the old posts over.&lt;/p&gt;
&lt;p&gt;But &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui Xie&lt;/a&gt; just &lt;a href=&#34;https://github.com/kbroman/blog/pull/2&#34;&gt;transferred everything&lt;/a&gt; for me! So awesome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>miner and craft</title>
      <link>https://kbroman.org/blog/2017/05/31/miner-and-craft/</link>
      <pubDate>Wed, 31 May 2017 23:48:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/31/miner-and-craft/</guid>
      <description>&lt;p&gt;In addition to our &lt;a href=&#34;https://github.com/ROpenSciLabs/miner&#34;&gt;miner&lt;/a&gt; package and our &lt;a href=&#34;https://ROpenSciLabs.github.io/miner_book&#34;&gt;in-development bookdown book&lt;/a&gt;, the R/minecraft team from the &lt;a href=&#34;https://ropensci.org&#34;&gt;ROpenSci&lt;/a&gt; &lt;a href=&#34;http://unconf17.ropensci.org&#34;&gt;Unconference&lt;/a&gt; had created a bunch of other useful code for interacting with &lt;a href=&#34;https://minecraft.net&#34;&gt;Minecraft&lt;/a&gt; from &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt;, which we’re putting into a &lt;a href=&#34;https://github.com/ROpenSciLabs/craft&#34;&gt;second package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I initially called this extra package “miner.extra”. (And I learned some new things about the rules for what characters can be used in R package names.) But then this evening I realized, “Hey, we could call it &lt;a href=&#34;https://github.com/ROpenSciLabs/craft&#34;&gt;craft&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;And I used the &lt;a href=&#34;https://github.com/ROpenSciLabs/available&#34;&gt;available&lt;/a&gt; package, also developed at last week’s unconference, and verified that indeed &lt;em&gt;craft&lt;/em&gt; is available. A bit of indecision about taking such a great name for this secondary package, but after checking with &lt;a href=&#34;https://twitter.com/daroczig&#34;&gt;Gergely&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/gbwanderson&#34;&gt;Brooke&lt;/a&gt;, went ahead with it.&lt;/p&gt;
&lt;p&gt;So I’m pleased to announce the &lt;a href=&#34;https://github.com/ROpenSciLabs/miner&#34;&gt;miner&lt;/a&gt; and &lt;a href=&#34;https://github.com/ROpenSciLabs/craft&#34;&gt;craft&lt;/a&gt; packages for playing with R and Minecraft.&lt;/p&gt;
&lt;p&gt;(I was of course tempted towards mineR and cRaft, but I didn’t want to &lt;a href=&#34;https://twitter.com/hadleywickham/status/859469052154138625&#34;&gt;disappoint Hadley&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/ROpenSciLabs/craft&#34;&gt;craft&lt;/a&gt; currently just contains code that I wrote, ’cause I was the only one who left dangling scripts that weren’t incorporated into a proper vignette. Functions from the others will follow.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>omg, bookdown!</title>
      <link>https://kbroman.org/blog/2017/05/31/omg-bookdown/</link>
      <pubDate>Wed, 31 May 2017 23:16:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/31/omg-bookdown/</guid>
      <description>&lt;p&gt;So I heard &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui Xie&lt;/a&gt; talk about &lt;a href=&#34;https://bookdown.org&#34;&gt;bookdown&lt;/a&gt;, and I read, with considerable excitement, his &lt;a href=&#34;https://bookdown.org/yihui/bookdown/&#34;&gt;bookdown book&lt;/a&gt;. (There’s a &lt;a href=&#34;https://www.amazon.com/gp/product/113870010X?ie=UTF8&amp;amp;tag=7210-20&#34;&gt;blurb from me at Amazon&lt;/a&gt; saying nice things about it, after all). But I must admit that I read the book on my iPad, with my feet up. And so my understanding, while reasonably complete, was somewhat theoretical.&lt;/p&gt;
&lt;p&gt;I mean, from &lt;a href=&#34;http://kbroman.org/blog/2014/08/12/if-i-could-do-it-over-again-id-self-publish/&#34;&gt;my own book writing experience&lt;/a&gt;, I felt like, “Hell if &lt;em&gt;I’m&lt;/em&gt; going to be writing another book.” And while I can see that it could be useful to reformat my &lt;a href=&#34;http://kbroman.org/pages/tutorials&#34;&gt;various tutorials&lt;/a&gt; as bookdown books, I wasn’t in a hurry to do that.&lt;/p&gt;
&lt;p&gt;But the R/minecraft team from the &lt;a href=&#34;https://ropensci.org&#34;&gt;ROpenSci&lt;/a&gt; &lt;a href=&#34;http://unconf17.ropensci.org&#34;&gt;Unconference&lt;/a&gt; had such a great time last week, and we developed such cool stuff, that we thought it would be good, in addition to polishing our &lt;a href=&#34;https://github.com/ROpenSciLabs/miner&#34;&gt;miner&lt;/a&gt; package, to compile our varied set of vignettes into a bookdown book.&lt;/p&gt;
&lt;p&gt;And so today I did. (You can see the working draft at &lt;a href=&#34;https://ROpenSciLabs.github.io/miner_book&#34; class=&#34;uri&#34;&gt;https://ROpenSciLabs.github.io/miner_book&lt;/a&gt;.) And boy it was easy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Made a &lt;a href=&#34;https://github.com/ropenscilabs/miner_book&#34;&gt;github repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Created a &lt;code&gt;index.Rmd&lt;/code&gt; file and a &lt;code&gt;_bookdown.yml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Copied over all of our extra &lt;code&gt;.Rmd&lt;/code&gt; files from &lt;code&gt;miner/extra_vignettes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replaced the YAML in those &lt;code&gt;.Rmd&lt;/code&gt; files with “&lt;code&gt;# [chapter title]&lt;/code&gt;”&lt;/li&gt;
&lt;li&gt;Copied over our screen shots&lt;/li&gt;
&lt;li&gt;Added references in &lt;code&gt;book.bib&lt;/code&gt; (and &lt;code&gt;packages.bib&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Screwed around making a cover&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, plus &lt;code&gt;README&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Okay, so I admit there was one glitch. I opened the thing in RStudio and said&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Now I just click the Build Book button. Wait, where is that? I just see the cutest-button-ever knit button. And clicking that doesn’t work properly.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More time than I care to admit passes, with me doing all kinds of crazy shit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Oh, he said the Build Book button on the &lt;em&gt;Build&lt;/em&gt; tab. I see it now.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And done.&lt;/p&gt;
&lt;p&gt;(Note that I also used his suggestion to have &lt;code&gt;output_dir: &amp;quot;docs&amp;quot;&lt;/code&gt; and then use GitHub Pages to host the book-in-progress, which was also easy.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>deeply nested functions</title>
      <link>https://kbroman.org/blog/2017/05/30/deeply-nested-functions/</link>
      <pubDate>Tue, 30 May 2017 10:41:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/30/deeply-nested-functions/</guid>
      <description>&lt;p&gt;If, in teaching folks about the &lt;a href=&#34;https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html&#34;&gt;magrittr&lt;/a&gt; pipe operator, &lt;code&gt;%&amp;gt;%&lt;/code&gt;, you’re looking for an in-the-wild example of deeply nested functions, our &lt;a href=&#34;https://github.com/ROpenSciLabs/miner&#34;&gt;miner&lt;/a&gt; package (for connecting &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; to &lt;a href=&#34;https://minecraft.net&#34;&gt;Minecraft&lt;/a&gt;, developed at the &lt;a href=&#34;https://ropensci.org&#34;&gt;ROpenSci&lt;/a&gt; &lt;a href=&#34;http://unconf17.ropensci.org&#34;&gt;2017 Unconference&lt;/a&gt;) has &lt;a href=&#34;https://github.com/ropenscilabs/miner/blob/master/R/chat.R#L33-L41&#34;&gt;a good one&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setNames(data.frame(
    do.call(rbind,
            sapply(
                X = sub(&amp;quot;,&amp;quot;, &amp;quot;|&amp;quot;, strsplit(string, &amp;#39;|&amp;#39;, fixed = TRUE)[[1]], fixed=TRUE),
                FUN = strsplit,
                split = &amp;#39;|&amp;#39;, fixed=TRUE,
                USE.NAMES = FALSE)),
    stringsAsFactors=FALSE),
    colnames)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This turns a character string like &lt;code&gt;&amp;quot;121,hello everyone|4734,R mc_plot()&amp;quot;&lt;/code&gt; into a data frame like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##   player        message
## 1    121 hello everyone
## 2   4734    R mc_plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s six functions deep: &lt;code&gt;strsplit %&amp;gt;% sub %&amp;gt;% sapply %&amp;gt;% do.call %&amp;gt;% data.frame %&amp;gt;% setNames&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ROpenSci Unconf 2017</title>
      <link>https://kbroman.org/blog/2017/05/27/ropensci-unconf-2017/</link>
      <pubDate>Sat, 27 May 2017 12:30:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/27/ropensci-unconf-2017/</guid>
      <description>&lt;p&gt;I’m back from the &lt;a href=&#34;https://ropensci.org&#34;&gt;ROpenSci&lt;/a&gt; &lt;a href=&#34;http://unconf17.ropensci.org&#34;&gt;Unconference&lt;/a&gt; in LA. A fabulous two days of R programming and, ur, playing &lt;a href=&#34;https://minecraft.net&#34;&gt;Minecraft&lt;/a&gt;. As one does.&lt;/p&gt;
&lt;p&gt;This was ROpenSci’s 4th unconference; the first I could attend. There were like 70 participants, nearly double what they had last year. The scheme is that people break up into groups and work on different projects that might be useful to the ROpenSci community. There was discussion about potential projects &lt;a href=&#34;https://github.com/ropensci/unconf17/issues&#34;&gt;in advance on GitHub&lt;/a&gt;, and then the first morning we voted on what we were interested in doing via stickers:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
Love the sticker interest in my &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt; issue! &lt;a href=&#34;https://t.co/AqQpxVJZuk&#34;&gt;pic.twitter.com/AqQpxVJZuk&lt;/a&gt;
&lt;/p&gt;
— Amelia McNamara (&lt;span class=&#34;citation&#34;&gt;@AmeliaMN&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/AmeliaMN/status/867793745986469889&#34;&gt;May 25, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I found the list of topics a bit forbidding. Important stuff, but a lot of them seemed technically difficult, and I didn’t really see how I could best contribute. And, jumping to the punch line, the &lt;a href=&#34;https://ropenscilabs.github.io/runconf17-projects/&#34;&gt;outcomes of the 2 days’ work&lt;/a&gt; are pretty awesome, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A R package, &lt;a href=&#34;https://github.com/ropenscilabs/available&#34;&gt;available&lt;/a&gt;, to help name R packages. (Have others used it? Can it be viewed as offensive?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A book on &lt;a href=&#34;https://github.com/ropenscilabs/r-security-practices&#34;&gt;best security practices for R package developers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;https://github.com/ropenscilabs/gramr&#34;&gt;grammar checker&lt;/a&gt; for R Markdown documents, “Write good and do good stuff.”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/testrmd&#34;&gt;testrmd&lt;/a&gt;, a package for including tests in R Markdown documents.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awesome stuff, and that’s &lt;a href=&#34;https://ropenscilabs.github.io/runconf17-projects/&#34;&gt;4 of 20&lt;/a&gt;. But you know, I don’t think I’m particularly good at any of those things. And for that reason, I was super excited when &lt;a href=&#34;https://github.com/daroczig&#34;&gt;Gergely Daróczi&lt;/a&gt; posted the idea that we make an R package through which we can interact with the game Minecraft.&lt;/p&gt;
&lt;p&gt;I’ve played a lot of Minecraft with my kids. And there’s a big community of folks writing “mods” for the game, but to do that, you need to write Java. And, well, I really don’t like Java. So I was excited, a few years ago, to see the book &lt;a href=&#34;https://www.amazon.com/gp/product/1593276702?ie=UTF8&amp;amp;tag=7210-20&#34;&gt;Learning to program with Minecraft&lt;/a&gt;, which uses a &lt;a href=&#34;https://github.com/py3minepi/py3minepi&#34;&gt;python module&lt;/a&gt; that allows you to interact with the game.&lt;/p&gt;
&lt;p&gt;The book is a very nice and thorough introduction to programming, using Minecraft as all of the examples and exercises. Really, it’s the best book on programming for kids that I’ve seen, &lt;em&gt;because&lt;/em&gt; it is so full of challenging but do-able and above all &lt;em&gt;interesting&lt;/em&gt; exercises. Good exercises are really the key to learning programming, and Minecraft provides a lot of really great It’s a great way to learn programming, because a key challenge in learning to program is identifying appropriate &lt;em&gt;challenges&lt;/em&gt; to try to work on, and for people who’ve tried to&lt;/p&gt;
&lt;p&gt;Our team of six (me, &lt;a href=&#34;https://github.com/daroczig&#34;&gt;Gergely Daróczi&lt;/a&gt;, &lt;a href=&#34;https://github.com/geanders&#34;&gt;Brooke Anderson&lt;/a&gt;, &lt;a href=&#34;https://github.com/revodavid&#34;&gt;David Smith&lt;/a&gt;, &lt;a href=&#34;https://github.com/inchiosa&#34;&gt;Mario Inchiosa&lt;/a&gt;, and &lt;a href=&#34;https://github.com/akzaidi&#34;&gt;Adi Zaidi&lt;/a&gt;) set out to replicate the features of the python module as an R package. There are basically just eight functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set a particular type of block somewhere&lt;/li&gt;
&lt;li&gt;figure out what type of block is at some spot&lt;/li&gt;
&lt;li&gt;figure out where a player is&lt;/li&gt;
&lt;li&gt;move a player somewhere&lt;/li&gt;
&lt;li&gt;figure out where a player is pointing&lt;/li&gt;
&lt;li&gt;check whether anyone has hit something with a sword&lt;/li&gt;
&lt;li&gt;post a message to chat&lt;/li&gt;
&lt;li&gt;read the chat messages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We had our basic working package, &lt;a href=&#34;https://github.com/ropenscilabs/miner&#34;&gt;miner&lt;/a&gt;, by lunchtime on the first day and spent the next day and a half playing with it and Minecraft.&lt;/p&gt;
&lt;p&gt;Just eight basic functions, but we did a ton of awesome things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A robot number-guessing game&lt;/li&gt;
&lt;li&gt;Automatic creation of mazes that players can walk through (or be moved through automatically)&lt;/li&gt;
&lt;li&gt;Replicate a photograph, or the R logo, within Minecraft using different types of blocks&lt;/li&gt;
&lt;li&gt;Give a player Elsa (from the movie Frozen) powers, like walking on water and having it turn to ice, or creating random-sized columns of ice by hitting things&lt;/li&gt;
&lt;li&gt;Write letters on the side of a mountain&lt;/li&gt;
&lt;li&gt;Draw a full ggplot2-like scatterplot in the sky&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://github.com/ropenscilabs/miner/blob/master/README.md&#34;&gt;the ReadMe file for our package&lt;/a&gt; to see a bunch of pictures and gifs.&lt;/p&gt;
&lt;p&gt;I’ll write about some of these things in the (hopefully near) future, because I learned some cool stuff, and it was was really fun.&lt;/p&gt;
&lt;p&gt;Just after lunch on day 2, I realized that we could use the chat feature in Minecraft to &lt;em&gt;execute R code from within Minecraft&lt;/em&gt;, using &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt;. And it totally worked. So I could generate my ggplot2-style scatterplot entirely within Minecraft. (The key advantage of this, other than just being cool, is not having to keep switching back and forth between R and Minecraft.)&lt;/p&gt;
&lt;p&gt;Watch me type a bit of R and get my scatterplot going:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zggCAYAfjXE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;What next? We’re thinking we’ll compile the many vignettes we developed into a &lt;a href=&#34;https://bookdown.org/yihui/bookdown/&#34;&gt;bookdown book&lt;/a&gt;. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>miniCRAN</title>
      <link>https://kbroman.org/blog/2017/05/23/minicran/</link>
      <pubDate>Tue, 23 May 2017 23:42:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/23/minicran/</guid>
      <description>&lt;p&gt;Next month, I’m teaching a workshop on &lt;a href=&#34;http://rqtl.org&#34;&gt;R/qtl&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/qtl2&#34;&gt;R/qtl2&lt;/a&gt; at the &lt;a href=&#34;http://www.complextrait.org/ctc2017&#34;&gt;joint Complex Trait Community and Rat Genomics Community meeting (CTC-RG2017)&lt;/a&gt; meeting in Memphis.&lt;/p&gt;
&lt;p&gt;I was chatting with &lt;a href=&#34;http://www.senresearch.org/&#34;&gt;Śaunak Sen&lt;/a&gt; about preparations: the main problem is installation of R/qtl2, which is split into multiple R packages, and I’ve not yet placed them on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;. And they’re a bit of a pain to install from GitHub (people need the proper development tools, and compilation of the C++ code is painfully slow).&lt;/p&gt;
&lt;p&gt;Should we have participants work on a server? Should we set up &lt;a href=&#34;https://rstudio.com&#34;&gt;RStudio&lt;/a&gt; in &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; containers on &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;Digital Ocean&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Śaunak said, “What we need is a mini-CRAN.” A google search brought us to the package &lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34;&gt;miniCRAN&lt;/a&gt; from &lt;a href=&#34;http://blog.revolutionanalytics.com/&#34;&gt;Revolution Analytics&lt;/a&gt;, which looks to be the perfect solution.&lt;/p&gt;
&lt;p&gt;As it turns out, to make your own &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt; you “just” need to put all of the requisite packages (source plus windows and mac binaries) into a specific directory structure, with each directory having special files (&lt;code&gt;PACKAGE&lt;/code&gt;, &lt;code&gt;PACKAGE.gz&lt;/code&gt;, and &lt;code&gt;PACKAGE.rds&lt;/code&gt;) that describe the contents.&lt;/p&gt;
&lt;p&gt;The main trick is ensuring that you have all of the required dependencies, and that’s where &lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34;&gt;miniCRAN&lt;/a&gt; is especially helpful.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34;&gt;miniCRAN&lt;/a&gt; has several useful vignettes, plus a nice &lt;a href=&#34;http://blog.revolutionanalytics.com/2014/10/introducing-minicran.html&#34;&gt;blog post&lt;/a&gt; that explains the goal and basic use.&lt;/p&gt;
&lt;p&gt;After installing miniCRAN, the first thing was to define the set of packages that my &lt;a href=&#34;http://kbroman.org/qtl2&#34;&gt;R/qtl2&lt;/a&gt; packages depend on, and then use &lt;code&gt;miniCRAN::pkgDep&lt;/code&gt; to find all of the packages that those depend on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(miniCRAN)
repo &amp;lt;- &amp;quot;https://cran.rstudio.com&amp;quot;
pkgs &amp;lt;- c(&amp;quot;Rcpp&amp;quot;, &amp;quot;RcppEigen&amp;quot;, &amp;quot;yaml&amp;quot;, &amp;quot;jsonlite&amp;quot;, &amp;quot;data.table&amp;quot;,
          &amp;quot;knitr&amp;quot;, &amp;quot;rmarkdown&amp;quot;, &amp;quot;qtl&amp;quot;, &amp;quot;qtlcharts&amp;quot;)
pkgList &amp;lt;- pkgDep(pkgs, repos=repo, type=&amp;quot;source&amp;quot;, suggests=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;pkgs&lt;/code&gt; is a vector containing the main packages that we’ll need (other than the R/qtl2 packages), and &lt;code&gt;pkgList&lt;/code&gt; is a longer vector that includes all packages that &lt;em&gt;they&lt;/em&gt; depend on.&lt;/p&gt;
&lt;p&gt;We then use &lt;code&gt;miniCRAN::makeRepo&lt;/code&gt; to download all of those packages and place them in the required directory structure, with the main directory being &lt;code&gt;qtl2cran&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;makeRepo(pkgList, path=&amp;quot;qtl2cran&amp;quot;, repos=repo,
         type=c(&amp;quot;source&amp;quot;, &amp;quot;win.binary&amp;quot;, &amp;quot;mac.binary.el-capitan&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only issue here is that the version of miniCRAN on CRAN doesn’t handle &lt;code&gt;mac.binary.el-capitan&lt;/code&gt; properly, nor does the &lt;a href=&#34;https://github.com/revolutionAnalytics/miniCRAN&#34;&gt;version on GitHub&lt;/a&gt;. But there’s a &lt;a href=&#34;https://github.com/RevolutionAnalytics/miniCRAN/pull/84&#34;&gt;pull request&lt;/a&gt; from &lt;a href=&#34;https://github.com/vnijs&#34;&gt;Vincent Nijs&lt;/a&gt; that fixes that, so I used &lt;code&gt;devtools::install_github(&amp;quot;vnijs/miniCRAN&amp;quot;)&lt;/code&gt; to use his version.&lt;/p&gt;
&lt;p&gt;I then needed to add my &lt;a href=&#34;http://kbroman.org/qtl2&#34;&gt;R/qtl2&lt;/a&gt; packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source &lt;code&gt;.tar.gz&lt;/code&gt; files in &lt;code&gt;qtl2cran/src/contrib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows &lt;code&gt;.zip&lt;/code&gt; files in &lt;code&gt;qtl2cran/bin/windows/contrib/3.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mac &lt;code&gt;.tgz&lt;/code&gt; files in &lt;code&gt;qtl2cran/bin/macosx/el-capitan/contrib/3.4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m working on a Mac (with OS X Sierra) so I could create the Mac binaries by installing the packages, going to the package directory, and using for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar czvf qtl2geno_0.5-21.tgz qtl2geno&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the windows binaries, I untarred the source files on my &lt;a href=&#34;https://twitter.com/kwbroman/status/540250068360916994&#34;&gt;windows laptop&lt;/a&gt; and used, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R CMD INSTALL --build qtl2geno&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes the &lt;code&gt;qtl2geno_0.5-21.zip&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The last step is to create those &lt;code&gt;PACKAGE*&lt;/code&gt; files. A bit of poking around in the &lt;a href=&#34;https://github.com/RevolutionAnalytics/miniCRAN&#34;&gt;miniCRAN source&lt;/a&gt; pointed me to &lt;code&gt;tools::write_PACKAGES()&lt;/code&gt;, and so I used:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tools)
write_PACKAGES(&amp;quot;qtl2cran/src/contrib&amp;quot;, type=&amp;quot;source&amp;quot;)
write_PACKAGES(&amp;quot;qtl2cran/bin/windows/contrib/3.4&amp;quot;, type=&amp;quot;win.binary&amp;quot;)
write_PACKAGES(&amp;quot;qtl2cran/bin/macosx/el-capitan/contrib/3.4&amp;quot;,
               type=&amp;quot;mac.binary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then put them on my website at UW-Madison plus at &lt;a href=&#34;http://rqtl.org&#34;&gt;rqtl.org&lt;/a&gt;, so now people can install &lt;a href=&#34;http://kbroman.org&#34;&gt;R/qtl2&lt;/a&gt; using either&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(paste0(&amp;quot;qtl2&amp;quot;, c(&amp;quot;geno&amp;quot;, &amp;quot;scan&amp;quot;, &amp;quot;plot&amp;quot;, &amp;quot;convert&amp;quot;)),
                 repos=&amp;quot;http://rqtl.org/qtl2cran&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(paste0(&amp;quot;qtl2&amp;quot;, c(&amp;quot;geno&amp;quot;, &amp;quot;scan&amp;quot;, &amp;quot;plot&amp;quot;, &amp;quot;convert&amp;quot;)),
                 repos=&amp;quot;https://www.biostat.wisc.edu/~kbroman/qtl2cran&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We just need to make sure that everyone has R version 3.4.0. And the Mac users will need a relatively recent version of Mac OS X (El Capitan or Sierra).&lt;/p&gt;
&lt;p&gt;Long term, I need to get my packages on the proper &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;, but I really don’t want to have to deal with that in the next three weeks, and so I’m glad for &lt;a href=&#34;https://cran.r-project.org/package=miniCRAN&#34;&gt;miniCRAN&lt;/a&gt;, as it helped me towards this short-term solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reading/writing biggish data, revisited</title>
      <link>https://kbroman.org/blog/2017/05/11/reading/writing-biggish-data-revisited/</link>
      <pubDate>Thu, 11 May 2017 23:50:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/11/reading/writing-biggish-data-revisited/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/mattdowle?lang=en&#34;&gt;Matt Dowle&lt;/a&gt; encouraged me to follow up on my &lt;a href=&#34;./2017/04/30/sqlite-feather-and-fst/&#34;&gt;post about sqlite, feather, and fst&lt;/a&gt;. One thing to emphasize is that &lt;code&gt;saveRDS&lt;/code&gt;, by default, uses compression. If you use &lt;code&gt;compress=FALSE&lt;/code&gt; you can skip that and it goes &lt;em&gt;much&lt;/em&gt; faster. See, for example, &lt;a href=&#34;https://blog.h2o.ai/2016/04/fast-csv-writing-for-r/&#34;&gt;his post on “Fast csv writing for R”&lt;/a&gt;. Also see his &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki/talks/BARUG_201704_ParallelFread.pdf&#34;&gt;slides from a recent presentation on parallel fread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll first generate the same data that I was using before. And note, as &lt;a href=&#34;https://twitter.com/shabbychef&#34;&gt;@shabbychef&lt;/a&gt; &lt;a href=&#34;https://twitter.com/shabbychef/status/858892435820130304&#34;&gt;mentioned on twitter&lt;/a&gt;, my iid simulations mean that compression isn’t likely to be useful, &lt;a href=&#34;./2017/04/30/sqlite-feather-and-fst/&#34;&gt;as we saw in my previous post&lt;/a&gt;. So don’t assume that these results apply generally; compression is useful much of the time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_ind &amp;lt;- 500
n_snps &amp;lt;- 1e5
ind_names &amp;lt;- paste0(&amp;quot;ind&amp;quot;, 1:n_ind)
snp_names &amp;lt;- paste0(&amp;quot;snp&amp;quot;, 1:n_snps)
sigX &amp;lt;- matrix(rnorm(n_ind*n_snps), nrow=n_ind)
sigY &amp;lt;- matrix(rnorm(n_ind*n_snps), nrow=n_ind)
dimnames(sigX) &amp;lt;- list(ind_names, paste0(snp_names, &amp;quot;.X&amp;quot;))
dimnames(sigY) &amp;lt;- list(ind_names, paste0(snp_names, &amp;quot;.Y&amp;quot;))
db &amp;lt;- cbind(data.frame(id=ind_names, stringsAsFactors=FALSE),
            sigX, sigY)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s look at the time to write an RDS file, when compressed and when not. I’m again going to cache my results and just tell you what happened.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rds_file &amp;lt;- &amp;quot;db.rds&amp;quot;
saveRDS(db, rds_file, compress=FALSE)
rds_comp_file &amp;lt;- &amp;quot;db_comp.rds&amp;quot;
saveRDS(db, rds_comp_file)
db_copy1 &amp;lt;- readRDS(rds_file)
db_copy2 &amp;lt;- readRDS(rds_comp_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Writing the data to an RDS file took 5.5 sec when uncompressed and 51.4 sec when compressed. Reading them back in took 2.4 sec for the uncompressed file and 11.0 sec for the compressed file. The uncompressed RDS file was 805 MB, while the compressed one was 769 MB.&lt;/p&gt;
&lt;p&gt;So, &lt;em&gt;holy crap&lt;/em&gt; reading and writing the RDS files is fast when you use &lt;code&gt;compress=FALSE&lt;/code&gt;. Don’t tell your system administrator I said this, but if you’re working on a server with loads of disk space, for sure go with &lt;code&gt;compress=FALSE&lt;/code&gt; with your RDS files. On your laptop where uncompressed RDS files might get in the way of your music and movie libraries, you might want to use the compression.&lt;/p&gt;
&lt;div id=&#34;how-about-csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How about CSV?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://dirk.eddelbuettel.com/&#34;&gt;Dirk Eddelbuettel&lt;/a&gt; suggested that I might just use a plain CSV file, since &lt;code&gt;data.table::fread&lt;/code&gt; and &lt;code&gt;data.table::fwrite&lt;/code&gt; are so fast. How fast?&lt;/p&gt;
&lt;p&gt;To make use of the multi-threaded version of &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki&#34;&gt;data.table&lt;/a&gt;’s &lt;code&gt;fread&lt;/code&gt;, I need version 1.10.5 which is &lt;a href=&#34;https://github.com/rdatatable/data.table&#34;&gt;on GitHub&lt;/a&gt;. The version on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt; (&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;1.10.4&lt;/a&gt;) has multi-threaded &lt;code&gt;fwrite&lt;/code&gt; but only single-threaded &lt;code&gt;fread&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the GitHub version needs to be compiled with OpenMP, and after a lot of screwing around to do that, I ended up getting segfaults from &lt;code&gt;fwrite&lt;/code&gt;, so I just dumped this plan.&lt;/p&gt;
&lt;p&gt;So we’ll look at multi-threaded &lt;code&gt;fwrite&lt;/code&gt; but only single-threaded &lt;code&gt;fread&lt;/code&gt;. But we can all look forward to the multi-threaded &lt;code&gt;fread&lt;/code&gt; in the near future.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;fwrite&lt;/code&gt;, the number of threads is controlled by the argument &lt;code&gt;nThread&lt;/code&gt;. The default is to call &lt;code&gt;data.table::getDTthreads()&lt;/code&gt; which detects the maximum number of cores. On my Mac desktop at work, that’s 24. I’m going to hard-code it in.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;csv_file &amp;lt;- &amp;quot;db.csv&amp;quot;
library(data.table)
fwrite(db, csv_file, quote=FALSE)
db_copy3 &amp;lt;- data.table::fread(csv_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took 41.6 sec to write and 55.0 sec to read, and the file size is 1818 MB.&lt;/p&gt;
&lt;p&gt;How about if I set &lt;code&gt;nThread=1&lt;/code&gt; with &lt;code&gt;fwrite&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fwrite(db, csv_file, quote=FALSE, nThread=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Single-threaded, &lt;code&gt;fwrite&lt;/code&gt; took 69.1 sec.&lt;/p&gt;
&lt;p&gt;But the data set is 500 rows by 200k columns. How about if I used the transpose?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t_db &amp;lt;- cbind(data.frame(snp=rep(snp_names, 2),
                         signal=rep(c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;), each=n_snps),
                         stringsAsFactors=FALSE),
              rbind(t(sigX), t(sigY)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to write and read this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;csv_t_file &amp;lt;- &amp;quot;db_t.csv&amp;quot;
fwrite(t_db, csv_t_file, quote=FALSE, nThread=24)
t_db_copy &amp;lt;- fread(csv_t_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took 8.3 sec to write and 26.6 sec to read, and the file size is 1818 MB.&lt;/p&gt;
&lt;p&gt;And how about if I do &lt;code&gt;fwrite&lt;/code&gt; single-threaded?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fwrite(t_db, csv_t_file, quote=FALSE, nThread=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Single-threaded, the transposed data took 30.2 sec to write.&lt;/p&gt;
&lt;p&gt;(I’m not even going to try &lt;code&gt;read.csv&lt;/code&gt; and &lt;code&gt;write.csv&lt;/code&gt;. I’ll leave that to the reader.)&lt;/p&gt;
&lt;p&gt;Here’s a summary of the times:&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;.table { width: 100%; }&lt;/style&gt;
&lt;!-- html table generated in R 3.5.1 by xtable 1.8-3 package --&gt;
&lt;!-- Sat Nov 17 00:45:08 2018 --&gt;
&lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
function
&lt;/th&gt;
&lt;th&gt;
method
&lt;/th&gt;
&lt;th&gt;
data size
&lt;/th&gt;
&lt;th&gt;
time (s)
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
saveRDS
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
not compressed
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
5.5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
saveRDS
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
compressed
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
51.4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fwrite
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
24 threads
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
41.6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fwrite
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
1 thread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
69.1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fwrite
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
24 threads
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
200k × 500
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
8.3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fwrite
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
1 thread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
200k × 500
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
30.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
readRDS
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
not compressed
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
2.4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
readRDS
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
compressed
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
200k × 500
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
11.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
1 thread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
500 × 200k
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
55.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;
fread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
1 thread
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;
200k × 500
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
26.6
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;For sure, &lt;code&gt;fread&lt;/code&gt; and &lt;code&gt;fwrite&lt;/code&gt; are impressive. And I’d never have thought you could get advantage from parallel reads and writes.&lt;/p&gt;
&lt;p&gt;I’m going to stick with RDS (making use of &lt;code&gt;compress=FALSE&lt;/code&gt; when I don’t care much about disk space) when I want to read/write whole files from R. And I’ll go with SQLite, feather, or fst when I want super fast access to a single row or column. But I also do a lot of reading and writing of CSV files, and I’ve enjoyed &lt;code&gt;data.table::fread&lt;/code&gt; and will now be using &lt;code&gt;data.table::fwrite&lt;/code&gt;, too.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>updating d3panels and R/qtlcharts for D3 version 4</title>
      <link>https://kbroman.org/blog/2017/05/11/updating-d3panels-and-r/qtlcharts-for-d3-version-4/</link>
      <pubDate>Thu, 11 May 2017 16:22:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/11/updating-d3panels-and-r/qtlcharts-for-d3-version-4/</guid>
      <description>&lt;p&gt;I just spent some time updating my &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; library and &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; package for &lt;a href=&#34;https://d3js.org&#34;&gt;D3&lt;/a&gt; &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md&#34;&gt;version 4&lt;/a&gt;. It took just about a day, and the majority of the time was spent puzzling over &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#forces-d3-force&#34;&gt;d3-force&lt;/a&gt; and &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#brushes-d3-brush&#34;&gt;d3-brush&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Note that I just barely know what I’m doing, by which I mean I &lt;em&gt;don’t&lt;/em&gt; know what I’m doing. I’m able to get things to work, but I don’t always know why.)&lt;/p&gt;
&lt;p&gt;I was very glad that I’d written a bunch of tests, because I could use those to figure out what was working and what was not working, and whether my changes were effective. &lt;em&gt;Tests, test, tests.&lt;/em&gt; There’s nothing better than tests for this sort of refactoring business.&lt;/p&gt;
&lt;p&gt;I like the changes in D3 version 4, but trying to figure them out feels a bit like being back in 2012, when I was first trying to understand D3: I’ve not found many tutorials that explain how to use the new version, so I mostly focused on reading the &lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md&#34;&gt;API documentation&lt;/a&gt;, which isn’t easy for me to understand, or to walk through the code for some of [Michael Bostock]’s &lt;a href=&#34;https://bl.ocks.org/mbostock&#34;&gt;examples&lt;/a&gt;. There are loads of books and tutorials on D3, but they’re almost all still talking about D3 version 3. (This will change shortly. For example, the 2nd edition of &lt;a href=&#34;http://alignedleft.com/&#34;&gt;Scott Murray&lt;/a&gt;’s excellent &lt;a href=&#34;http://shop.oreilly.com/product/0636920037316.do&#34;&gt;Interactive Data Visualization for the Web&lt;/a&gt; is at the printer, and covers D3 version 4.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ireneros.com/&#34;&gt;Irene Ros&lt;/a&gt;’s &lt;a href=&#34;https://iros.github.io/d3-v4-whats-new/#1&#34;&gt;slides on what’s new in D3 V4&lt;/a&gt; were super helpful. (Also I just saw &lt;a href=&#34;http://www.puzzlr.org/sample-page/&#34;&gt;Tom Roth&lt;/a&gt;’s nice &lt;a href=&#34;http://www.puzzlr.org/force-graphs-with-d3/&#34;&gt;tutorial on d3-force&lt;/a&gt;, linked on the &lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34;&gt;D3 tutorials page&lt;/a&gt;; duh.)&lt;/p&gt;
&lt;p&gt;My D3 code isn’t particularly fancy. (And note that I’m still writing in &lt;a href=&#34;http://coffeescript.org&#34;&gt;CoffeeScript&lt;/a&gt;; I toyed with the idea of switching to &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/&#34;&gt;ES6&lt;/a&gt;, particularly because we can now use &lt;code&gt;(d) =&amp;gt; d.x&lt;/code&gt;. But I love CoffeeScript and don’t want to lose list comprehensions, and actually my favorite thing is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some_option = chartOpts?.some_option ? the_default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I do fight with the indentation at times, but I’ve grown accustomed to it.&lt;/p&gt;
&lt;p&gt;Anyway, back to the point of this: what did I have to change to get &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; and &lt;a href=&#34;https://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; to work with D3 version 4?&lt;/p&gt;
&lt;div id=&#34;simple-replacements&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simple replacements&lt;/h2&gt;
&lt;p&gt;The bulk of the changes were simple replacements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d3.scale.linear()&lt;/code&gt; → &lt;code&gt;d3.scaleLinear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.svg.line()&lt;/code&gt; → &lt;code&gt;d3.line()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.scale.category20().range()&lt;/code&gt; → &lt;code&gt;d3.schemeCategory20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3.random.normal(10,3)&lt;/code&gt; → &lt;code&gt;d3.randomNormal(10,3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slightly more tricky: &lt;code&gt;d3.scale.ordinal().rangeBands([0,w],0,0)&lt;/code&gt; became &lt;code&gt;d3.scaleBand().range([0,w])&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, I had written (well, borrowed from somewhere) methods &lt;code&gt;.moveToFront()&lt;/code&gt; and &lt;code&gt;.moveToBack()&lt;/code&gt;, which I can omit as D3 version 4 has &lt;code&gt;.raise()&lt;/code&gt; and &lt;code&gt;.lower()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So really, the majority of the changes were made by for &lt;code&gt;d3.&lt;/code&gt;, making some tiny edit, and then seeing if my tests were working.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d3-force&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#forces-d3-force&#34;&gt;d3-force&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My D3 code is rather primitive. I’m basically just drawing and then adding some &lt;code&gt;.on(&amp;quot;mouseover&amp;quot;, something)&lt;/code&gt; or &lt;code&gt;.on(&amp;quot;click&amp;quot;, something_else)&lt;/code&gt; for interactivity.&lt;/p&gt;
&lt;p&gt;But force-directed graphics are pretty awesome, particularly for &lt;a href=&#34;http://www.cbs.dtu.dk/~eklund/beeswarm/&#34;&gt;beeswarm&lt;/a&gt;-type plots, so I did make use of &lt;code&gt;d3.layout.force&lt;/code&gt; in two places.&lt;/p&gt;
&lt;p&gt;But I didn’t really know what I was doing before, and that made the change to &lt;code&gt;d3.forceSimulation&lt;/code&gt; a bit more puzzling. My &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/1.1.4/src/dotchart.coffee#L181-L246&#34;&gt;code implementing a beeswarm-type dot chart&lt;/a&gt; is really ugly and so not worth looking at or discussing. The &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/master/src/dotchart.coffee#L181-L201&#34;&gt;new version&lt;/a&gt; is just 21 lines (vs 65 lines before), and way easier to read.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&#34;http://kbroman.org/d3panels/assets/test/dotchart/&#34;&gt;&lt;code&gt;d3panels.dotchart&lt;/code&gt;&lt;/a&gt;, the main bit looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d3.range(scaledPoints.length).map( (i) -&amp;gt;
    scaledPoints[i].fy = scaledPoints[i].y)

force = d3.forceSimulation(scaledPoints)
      .force(&amp;quot;x&amp;quot;, d3.forceX((d) -&amp;gt; d.x))
      .force(&amp;quot;collide&amp;quot;, d3.forceCollide(pointsize*1.1))
      .on(&amp;quot;tick&amp;quot;, ticked)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a data set &lt;code&gt;scaledPoints&lt;/code&gt; which is an array of objects with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values for point locations. I add &lt;code&gt;.fy&lt;/code&gt; to each element of the array, to prevent the &lt;code&gt;y&lt;/code&gt; values from being changed. (This is a beeswarm-type chart where the x-axis is a category, and I want those values to be dynamically adjusted using &lt;em&gt;the force&lt;/em&gt;, but the y-axis is the quantitative value, and I don’t want those values to change.)&lt;/p&gt;
&lt;p&gt;Next I use &lt;code&gt;d3.forceSimulation&lt;/code&gt;, pass in my data, and then add a force that makes the points want to go towards their x value another another force that makes them not collide with each other.&lt;/p&gt;
&lt;p&gt;Finally, I have the &lt;code&gt;ticked&lt;/code&gt; function that does the updating of the point locations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ticked = () -&amp;gt;
    points.attr(&amp;quot;cx&amp;quot;, (d) -&amp;gt; d.x)
          .attr(&amp;quot;cy&amp;quot;, (d) -&amp;gt; d.y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s that. There’s a bit more code since I want the option of having the opposite orientation, with the categories on the y-axis and the quantitative values on the x-axis, but really it’s just those 9 lines of code plus a couple of blank lines.&lt;/p&gt;
&lt;p&gt;It was hard work figuring them out, but only because I was spending too much time hacking away without understanding, rather than trying to come to some understanding before doing any hacking.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d3-brush&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/d3/d3/blob/master/API.md#brushes-d3-brush&#34;&gt;d3-brush&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last major thing I had to figure out was d3-brush. I’ve not implemented any actual brushing in either &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; or &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, but I did use &lt;code&gt;d3.svg.brush&lt;/code&gt; in one my tests of &lt;a href=&#34;http://kbroman.org/d3panels/assets/test/scatterplot/&#34;&gt;&lt;code&gt;d3panels.scatterplot&lt;/code&gt;&lt;/a&gt;, to show that it could be done.&lt;/p&gt;
&lt;p&gt;In my &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/1.1.4/test/scatterplot/test_scatterplot.coffee#L66-L99&#34;&gt;original brush code&lt;/a&gt;, which was applied for a matrix of three scatterplots, I was creating a separate brush for each of the three scatterplots. And with the old &lt;code&gt;d3.svg.brush()&lt;/code&gt;, you’d pass x- and y-axis scales with &lt;code&gt;.x()&lt;/code&gt; and &lt;code&gt;.y()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You don’t pass scales to the new &lt;code&gt;d3.brush()&lt;/code&gt;. Instead, you use &lt;code&gt;d3.event.selection&lt;/code&gt; to grab the current selection in screen coordinates and then have to convert them back to plot coordinates with your scales’ inverses.&lt;/p&gt;
&lt;p&gt;But I revised my code to what I thought should be working, and which was actually working for the first of the three scatterplots, but I got cryptic errors if I tried to brush the other two scatterplots. And so finally, in the &lt;a href=&#34;https://github.com/kbroman/d3panels/blob/master/test/scatterplot/test_scatterplot.coffee#L66-L102&#34;&gt;revised code&lt;/a&gt;, I decided to use a single brush that was applied across the three scatterplots. (It seems that you &lt;a href=&#34;http://bl.ocks.org/ludwigschubert/0236fa8594c4b02711b2606a8f95f605&#34;&gt;can implement multiple brushes&lt;/a&gt;, but it’s complicated.) The single-brush solution is perfectly fine for my test case, and actually it’s maybe easier to understand.&lt;/p&gt;
&lt;p&gt;So the conversion from &lt;code&gt;d3.svg.brush&lt;/code&gt; to &lt;code&gt;d3.brush&lt;/code&gt; was really pretty easy. I needed to abandon the multiple brushes, and then the back-calculation from screen coordinates to plot coordinates is slightly tedious but not a big deal.&lt;/p&gt;
&lt;p&gt;So that was the last thing, and I now have both &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt; working for &lt;a href=&#34;https://d3js.org&#34;&gt;D3&lt;/a&gt; version 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-the-point&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What’s the point?&lt;/h2&gt;
&lt;p&gt;The point of all this is that I have ideas for further plots I want to make in &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, such as a tool for exploring pleiotropy (that is, whether two traits are affected by a common genetic locus, or instead are each controlled by separate but closely linked loci). For that thing, I wanted a double-slider, and it seemed best to implement it using D3 version 4, &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/D3/d3doubleslider/&#34;&gt;which I did&lt;/a&gt;. But I want to use my slider with &lt;a href=&#34;http://kbroman.org/d3panels&#34;&gt;d3panels&lt;/a&gt;, and really I want to incorporate it into &lt;a href=&#34;http://kbroman.org/qtlcharts&#34;&gt;R/qtlcharts&lt;/a&gt;, so it was clear that I needed to spend some time refactoring.&lt;/p&gt;
&lt;p&gt;And actually, I was surprised at how easy it was. (I thought it would be considerably more than a day’s work.) And I feel like I now kind of understand d3-force and d3-brush, so the effort involved was definitely worthwhile.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>crayon colors, simplified</title>
      <link>https://kbroman.org/blog/2017/05/02/crayon-colors-simplified/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/02/crayon-colors-simplified/</guid>
      <description>&lt;p&gt;Back in 2014, I’d grabbed the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors&#34;&gt;Crayola crayon colors from Wikipedia&lt;/a&gt; and made them available as part of my &lt;a href=&#34;https://github.com/kbroman/broman&#34;&gt;R/broman&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;(I &lt;a href=&#34;http://kbroman.org/blog/2014/05/07/crayon-colors-in-r/&#34;&gt;wrote about it on previously&lt;/a&gt;, and then &lt;a href=&#34;http://kbroman.org/blog/2014/05/08/two-more-points-about-crayon-colors/&#34;&gt;again&lt;/a&gt; and &lt;a href=&#34;http://kbroman.org/blog/2014/05/09/further-points-on-crayon-colors/&#34;&gt;again&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;But using my package to get the crayon colors can be rather tedious.&lt;/p&gt;
&lt;p&gt;It’s easy to view the available colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(broman)
plot_crayons()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-05-02-crayon-colors-simplified_files/figure-html/plot_crayons-1.png&#34; width=&#34;700&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But grabbing a color, say “Purple Mountain’s Majesty”, requires rather verbose code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brocolors(&amp;quot;crayons&amp;quot;)[&amp;quot;Purple Mountain&amp;#39;s Majesty&amp;quot;]
## Purple Mountain&amp;#39;s Majesty 
##                 &amp;quot;#9d81ba&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This morning, it was just too much for me. So I wrote a simpler function &lt;code&gt;crayons()&lt;/code&gt;, which accepts partial matches, using &lt;code&gt;grep&lt;/code&gt;. So you can write things like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crayons(&amp;quot;purple m&amp;quot;)
## Purple Mountain&amp;#39;s Majesty 
##                 &amp;quot;#9d81ba&amp;quot;
crayons(&amp;quot;tickle&amp;quot;)
## Tickle Me Pink 
##      &amp;quot;#fc89ac&amp;quot;
crayons(c(&amp;quot;purple m&amp;quot;, &amp;quot;tickle&amp;quot;))
## Purple Mountain&amp;#39;s Majesty            Tickle Me Pink 
##                 &amp;quot;#9d81ba&amp;quot;                 &amp;quot;#fc89ac&amp;quot;
crayons(&amp;quot;purple m&amp;quot;, &amp;quot;tickle&amp;quot;)
## Purple Mountain&amp;#39;s Majesty            Tickle Me Pink 
##                 &amp;quot;#9d81ba&amp;quot;                 &amp;quot;#fc89ac&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why didn’t I think of this before?&lt;/p&gt;
&lt;p&gt;The new version of the package is not yet on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;, but you can install it from &lt;a href=&#34;https://github.com/kbroman/broman&#34;&gt;GitHub&lt;/a&gt; using &lt;a href=&#34;https://github.com/hadley/devtools&#34;&gt;devtools&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;kbroman/broman&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can ignore the rest of the package and just &lt;a href=&#34;https://github.com/kbroman/broman/blob/master/R/brocolors.R&#34;&gt;grab the code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>caching blogdown</title>
      <link>https://kbroman.org/blog/2017/05/01/caching-blogdown/</link>
      <pubDate>Mon, 01 May 2017 00:10:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/05/01/caching-blogdown/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt; is cool, but it seems that it builds every &lt;code&gt;.Rmd&lt;/code&gt; file every time you run &lt;code&gt;build_site()&lt;/code&gt;, so if your site includes an analysis that takes a while…well, every time you build the site it’s going to take a while.&lt;/p&gt;
&lt;p&gt;I had the mistaken impression that blogdown would look at the timestamps on the &lt;code&gt;.Rmd&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; and only build the &lt;code&gt;.html&lt;/code&gt; if the &lt;code&gt;.Rmd&lt;/code&gt; file is newer, but that’s not true.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&#34;http://kbroman.org/blog/2017/04/30/sqlite-feather-and-fst/&#34;&gt;post about sqlite, feather, and fst&lt;/a&gt; is rather slow, because I’m writing and reading rather big files and measuring access times. So it was looking like building my &lt;a href=&#34;http://kbroman.org/blog&#34;&gt;new blog&lt;/a&gt; would be really painful, forever more.&lt;/p&gt;
&lt;p&gt;Thus, I spent a bunch of time reworking the post to cache the times rather than running things every time the &lt;code&gt;.Rmd&lt;/code&gt; file was built. &lt;a href=&#34;https://github.com/kbroman/blog/blob/source/content/post/2017-04-30-sqlite-feather-and-fst.Rmd&#34;&gt;It’s not pretty&lt;/a&gt;, and my method is &lt;em&gt;not&lt;/em&gt; generally recommended, but it seems to work.&lt;/p&gt;
&lt;p&gt;I expect &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui&lt;/a&gt; has a better solution to this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sqlite, feather, and fst</title>
      <link>https://kbroman.org/blog/2017/04/30/sqlite-feather-and-fst/</link>
      <pubDate>Sun, 30 Apr 2017 14:07:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/04/30/sqlite-feather-and-fst/</guid>
      <description>&lt;p&gt;I don’t think I’m unusual among statisticians in having avoided working directly with databases for much of my career. The data for my projects have been reasonably small. (In fact, basically all of the data for my 20 years of projects are on my laptop’s drive.) Flat files (such as CSV files) were sufficient.&lt;/p&gt;
&lt;p&gt;But I’ve finally entered the modern era of biggish data. (Why do they call it &lt;em&gt;big&lt;/em&gt; data? That doesn’t leave us much room for gradations of size. In the 90’s, statisticians talked about &lt;a href=&#34;https://www.nap.edu/read/5505/chapter/1&#34;&gt;&lt;em&gt;massive&lt;/em&gt; data&lt;/a&gt;.) And particularly for visualization of large-scale data, I don’t want to load everything in advance, and I want rapid access to slices of data.&lt;/p&gt;
&lt;p&gt;So I’ve been playing with &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; and &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;, and more recently &lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt; and &lt;a href=&#34;http://www.fstpackage.org&#34;&gt;fst&lt;/a&gt;. And I thought I’d show a few examples. I’m interested mostly in quick access, from &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt;, to small portions of a large file.&lt;/p&gt;
&lt;div id=&#34;data-rds&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;data, rds&lt;/h3&gt;
&lt;p&gt;Let me start by simulating some data. I’m mostly thinking about the case of 500 100k-SNP arrays. So the data are pairs of intensity measures for the two alleles at each of 100k SNPs in 500 samples. And typically I want to grab the 500 pairs of intensities for a given SNP. I’m going to just simulate IID noise, because for these illustrations I don’t really care about the contents so much as the storage size and I/O speed.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Note: this stuff takes a long time to run, so the &lt;a href=&#34;https://github.com/kbroman/blog/blob/source/content/post/2017-04-30-sqlite-feather-and-fst.Rmd&#34;&gt;actual code behind the scenes&lt;/a&gt; is more complicated, with me having cached the timings and skipped the actual runs.&lt;/em&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_ind &amp;lt;- 500
n_snps &amp;lt;- 1e5
ind_names &amp;lt;- paste0(&amp;quot;ind&amp;quot;, 1:n_ind)
snp_names &amp;lt;- paste0(&amp;quot;snp&amp;quot;, 1:n_snps)
sigX &amp;lt;- matrix(rnorm(n_ind*n_snps), nrow=n_ind)
sigY &amp;lt;- matrix(rnorm(n_ind*n_snps), nrow=n_ind)
dimnames(sigX) &amp;lt;- list(ind_names, paste0(snp_names, &amp;quot;.X&amp;quot;))
dimnames(sigY) &amp;lt;- list(ind_names, paste0(snp_names, &amp;quot;.Y&amp;quot;))
db &amp;lt;- cbind(data.frame(id=ind_names, stringsAsFactors=FALSE),
            sigX, sigY)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My typical approach with data like this is to save it in an RDS file and just read the whole thing into memory if I want to work with it. But it’s rather slow to write and read such a big data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rds_file &amp;lt;- &amp;quot;db.rds&amp;quot;
saveRDS(db, rds_file)
db_copy &amp;lt;- readRDS(rds_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was like 49 sec to write the RDS file, and 7.0 sec to read it. The file itself is 769 MB.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sqlite&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;sqlite&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mongodb.com&#34;&gt;Mongo&lt;/a&gt; is cool, and I think ultimately it will be useful to me, but &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; has the advantage of being a single file that you can hand to others. And installation is easy: you just need &lt;a href=&#34;https://cran.rstudio.com/package=RSQLite/&#34;&gt;&lt;code&gt;install.packages(&amp;quot;RSQLite&amp;quot;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SQLite won’t take more than &lt;a href=&#34;https://sqlite.org/limits.html&#34;&gt;2000 columns&lt;/a&gt; (or maybe 32,767 if you change a compile-time parameter), so we need to take the transpose of our data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t_db &amp;lt;- cbind(data.frame(snp=rep(snp_names, 2),
                         signal=rep(c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;), each=n_snps),
                         stringsAsFactors=FALSE),
              rbind(t(sigX), t(sigY)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s rearrange it so that the two rows for a given SNP are next to each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db_rows &amp;lt;- as.numeric(matrix(1:nrow(t_db), byrow=TRUE, nrow=2))
t_db &amp;lt;- t_db[db_rows,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To write to a SQLite file, we use &lt;code&gt;dbConnect&lt;/code&gt; to create a database connection, and then &lt;code&gt;dbWriteTable&lt;/code&gt;. We can use &lt;code&gt;dbDisconnect&lt;/code&gt; to disconnect afterwards, if we’re done.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(RSQLite)
sqlite_file &amp;lt;- &amp;quot;t_db.sqlite&amp;quot;
sqldb &amp;lt;- dbConnect(SQLite(), dbname=sqlite_file)
dbWriteTable(sqldb, &amp;quot;snps&amp;quot;, t_db, row.names=FALSE, overwrite=TRUE,
             append=FALSE, field.types=NULL)
dbDisconnect(sqldb)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The writing took 35 sec, and the resulting file is 923 MB.&lt;/p&gt;
&lt;p&gt;A key advantage of SQLite is to be able to quickly access a portion of the data, for example to grab the two rows for a particular SNP. You’d need to know the SNP names, first, which you can get by grabbing that column (or &lt;em&gt;field&lt;/em&gt;) with &lt;code&gt;dbGetQuery&lt;/code&gt;. A data frame is returned, so we select the first column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sqldb &amp;lt;- dbConnect(SQLite(), dbname=sqlite_file)
snp_names &amp;lt;- dbGetQuery(sqldb, &amp;#39;select snp from snps&amp;#39;)[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can call &lt;code&gt;dbGetQuery&lt;/code&gt; again to get the two rows of data for a given SNP.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_snp &amp;lt;- sample(snp_names, 1)
query &amp;lt;- paste0(&amp;#39;select * from snps where snp == &amp;quot;&amp;#39;, random_snp, &amp;#39;&amp;quot;&amp;#39;)
system.time(z &amp;lt;- dbGetQuery(sqldb, query))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.353   0.485   0.838&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such queries are faster if we first add an index on the SNP names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dbGetQuery(sqldb, &amp;quot;CREATE INDEX snp ON snps(snp)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file is basically the same size, 926 MB, and queries are now all but instantaneous.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_snp &amp;lt;- sample(snp_names, 1)
query &amp;lt;- paste0(&amp;#39;select * from snps where snp == &amp;quot;&amp;#39;, random_snp, &amp;#39;&amp;quot;&amp;#39;)
system.time(z &amp;lt;- dbGetQuery(sqldb, query))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.004   0.000   0.004&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;feather&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;feather&lt;/h3&gt;
&lt;p&gt;I’d understood &lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt; to be a quick way of transferring data between python and R; &lt;a href=&#34;https://simecek.github.io/&#34;&gt;Petr Simacek&lt;/a&gt; convinced me of its more-broad uses, such as to take the place of a single-table database.&lt;/p&gt;
&lt;p&gt;Writing a feather file is surprisingly fast, and reading it back in is even faster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(feather)
feather_file &amp;lt;- &amp;quot;t_db.feather&amp;quot;
write_feather(t_db, feather_file)
t_db_clone &amp;lt;- read_feather(feather_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took about 3 sec to write, and 1.0 sec to read, and the file is about 803 MB.&lt;/p&gt;
&lt;p&gt;But queries of particular columns or rows are fast, too. So you can basically use feather like a database.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db_f &amp;lt;- feather(feather_file)
snp_names &amp;lt;- unlist(db_f[,&amp;quot;snp&amp;quot;])
random_snp &amp;lt;- sample(snp_names, 1)
system.time(z &amp;lt;- db_f[snp_names==random_snp,])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.381   0.353   0.735&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this particular case, it’s actually quite a bit faster to work with feather the other way around; that is, in the original format of 500 arrays x 100k SNPs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;feather_file_2 &amp;lt;- &amp;quot;db.feather&amp;quot;
write_feather(db, feather_file_2)
db_clone &amp;lt;- read_feather(feather_file_2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took about 3 sec to write, and 1.8 sec to read, and the file is about 815 MB.&lt;/p&gt;
&lt;p&gt;Accessing particular rows is just as easy. First a bit of code to grab the SNP names by grabbing the column names, getting rid of the &lt;code&gt;&amp;quot;.X&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;.Y&amp;quot;&lt;/code&gt; bits at the end, and then taking the first half.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;db_f_2 &amp;lt;- feather(feather_file_2)
snp_names &amp;lt;- sub(&amp;quot;\\.[XY]$&amp;quot;, &amp;quot;&amp;quot;, colnames(db_f_2))
snp_names &amp;lt;- snp_names[1:(length(snp_names)/2)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we grab the data for a random SNP by pasting &lt;code&gt;&amp;quot;.X&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;.Y&amp;quot;&lt;/code&gt; back onto the SNP name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_snp &amp;lt;- sample(snp_names, 1)
system.time(z &amp;lt;- db_f_2[,c(&amp;quot;id&amp;quot;, paste0(random_snp, c(&amp;quot;.X&amp;quot;, &amp;quot;.Y&amp;quot;)))])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.045   0.000   0.045&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can also use &lt;a href=&#34;https://github.com/tidyverse/dplyr&#34;&gt;dplyr&lt;/a&gt; with &lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt; as if you’ve got an in-memory data frame.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fst&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;fst&lt;/h3&gt;
&lt;p&gt;After &lt;a href=&#34;https://twitter.com/kwbroman/status/855112575373148162&#34;&gt;tweeting about feather&lt;/a&gt;, &lt;a href=&#34;http://dirk.eddelbuettel.com/&#34;&gt;Dirk Eddelbuettel&lt;/a&gt; suggested that I look at the &lt;a href=&#34;http://www.fstpackage.org/&#34;&gt;fst package&lt;/a&gt;. It’s not quite as slick to take data slices, but it’s potentially faster and you can write a compressed file to save disk space.&lt;/p&gt;
&lt;p&gt;Like SQLite, it’s best not to have &lt;em&gt;too&lt;/em&gt; many columns, so we’ll work with the transposed version of the data frame, with SNPs as rows. Writing and reading are fast.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(fst)
fst_file &amp;lt;- &amp;quot;db.fst&amp;quot;
write.fst(t_db, fst_file)
t_db_clone &amp;lt;- read.fst(fst_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took 3.0 sec to write, 1.1 sec to read, and the file is about 803 MB.&lt;/p&gt;
&lt;p&gt;Writing a compressed file is quite a bit slower. Here at 80% compression.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fstcomp_file &amp;lt;- &amp;quot;db_comp.fst&amp;quot;
write.fst(t_db, fstcomp_file, 80)
t_db_clone &amp;lt;- read.fst(fstcomp_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That took 6.7 sec to write, 2.7 sec to read, and the file is about 781 MB.&lt;/p&gt;
&lt;p&gt;Doing queries on an &lt;a href=&#34;http://www.fstpackage.org&#34;&gt;fst&lt;/a&gt; file is not quite as slick as for &lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt;, but it’s fast. The &lt;code&gt;read.fst&lt;/code&gt; function has a &lt;code&gt;columns&lt;/code&gt; argument to grab particular columns, and &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; arguments to grab a slice of rows.&lt;/p&gt;
&lt;p&gt;We’ll first grab the &lt;code&gt;snp&lt;/code&gt; column to get the SNP names. And let’s just work with the compressed version of the file. Since &lt;code&gt;read.fst&lt;/code&gt; will return a one-column data frame, we grab the first column to make it a vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snp_names &amp;lt;- read.fst(fstcomp_file, &amp;quot;snp&amp;quot;)[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can choose a random SNP, find the corresponding rows, and then use &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; to grab those two rows. You can see it’s useful to have the the pairs of rows for each SNP be contiguous.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_snp &amp;lt;- sample(snp_names, 1)
wh_rows &amp;lt;- which(random_snp == snp_names)
system.time(z &amp;lt;- read.fst(fstcomp_file, from=wh_rows[1], to=wh_rows[2]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   0.078   0.011   0.089&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;timings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;timings&lt;/h3&gt;
&lt;p&gt;Let’s use the &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt; package to compare timings for grabbing a random SNP. First a bit of set-up.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_snp &amp;lt;- sample(snp_names, 1)
library(microbenchmark)
sqlite_file &amp;lt;- &amp;quot;t_db.sqlite&amp;quot;
sqldb &amp;lt;- dbConnect(SQLite(), dbname=sqlite_file)
query &amp;lt;- paste0(&amp;#39;select * from snps where snp == &amp;quot;&amp;#39;, random_snp, &amp;#39;&amp;quot;&amp;#39;)
db_f &amp;lt;- feather(feather_file)
db_f_2 &amp;lt;- feather(feather_file_2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the timings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;microbenchmark(sqlite=dbGetQuery(sqldb, query),
               feather=db_f[snp_names==random_snp,],
               feather_t=db_f_2[,c(&amp;quot;id&amp;quot;, paste0(random_snp, c(&amp;quot;.X&amp;quot;,&amp;quot;.Y&amp;quot;)))],
               fst={wh_rows &amp;lt;- which(random_snp == snp_names)
                    read.fst(fst_file, from=wh_rows[1], to=wh_rows[2])},
               fstcomp={wh_rows &amp;lt;- which(random_snp == snp_names)
                    read.fst(fstcomp_file, from=wh_rows[1], to=wh_rows[2])},
               times=100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##       expr min  lq mean median  uq  max neval
##     sqlite   3   4    4      4   4    4   100
##    feather 618 641  717    660 766 1215   100
##  feather_t  43  47   48     48  49   54   100
##        fst  61  63   80     64  65  341   100
##    fstcomp  91  95  117     95  97  691   100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a summary of all of the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(results, digits=c(1,1,0,1),
             col.names=c(&amp;quot;write time (s)&amp;quot;, &amp;quot;read time (s)&amp;quot;,
                         &amp;quot;file size (MB)&amp;quot;, &amp;quot;access time (ms)&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;write time (s)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;read time (s)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;file size (MB)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;access time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;rds&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;769&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;sqlite&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;923&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;feather&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;803&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;716.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;feather (tr)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;815&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;fst&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;803&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;79.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;fst (compr)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;781&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;116.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I don’t think we can draw general conclusions about the relative speed and file size of the three approaches from these results. And I think they’re all really useful and interesting.&lt;/p&gt;
&lt;p&gt;But in this particular case, the file compression didn’t really help with &lt;a href=&#34;http://www.fstpackage.org&#34;&gt;fst&lt;/a&gt; and slowed things down. When accessing the data, &lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt; was considerably faster than &lt;a href=&#34;http://www.fstpackage.org&#34;&gt;fst&lt;/a&gt; when the data were organized with the SNPs as columns, but was considerably slower when the data were in the opposite orientation. &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; has much faster access times, but with a larger file size that takes longer to write.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>old posts</title>
      <link>https://kbroman.org/blog/2017/04/30/old-posts/</link>
      <pubDate>Sun, 30 Apr 2017 10:50:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/04/30/old-posts/</guid>
      <description>&lt;p&gt;In moving away from my &lt;a href=&#34;http://kbroman.org/blog/&#34;&gt;old wordpress site&lt;/a&gt;, I thought I’d look back at some of my old posts there. Here are the most frequently visited ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/10/07/better-looking-latexbeamer-slides/&#34;&gt;Better-looking LaTeX/Beamer slides&lt;/a&gt;, 2013-10-07&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2015/06/22/mongodb-with-d3-js/&#34;&gt;MongoDB with D3.js&lt;/a&gt;, 2015-06-22&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/05/07/crayon-colors-in-r/&#34;&gt;Crayon colors in R&lt;/a&gt;, 2014-05-07&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/02/apply-vs-for/&#34;&gt;&lt;code&gt;apply&lt;/code&gt; vs &lt;code&gt;for&lt;/code&gt;&lt;/a&gt;, 2013-04-02&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/02/thoughts-on-statistical-consulting/&#34;&gt;Thoughts on statistical consulting&lt;/a&gt;, 2013-04-02&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/09/03/notifications-from-r/&#34;&gt;Notifications from R&lt;/a&gt;, 2014-09-03&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/05/25/a-course-in-statistical-programming/&#34;&gt;A course in statistical programming&lt;/a&gt;, 2012-05-25&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/03/21/row-names-in-data-frames-beware-of-1nrow/&#34;&gt;Row names in data frames: beware of &lt;code&gt;1:nrow&lt;/code&gt;&lt;/a&gt;, 2012-03-21&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/02/08/interactive-graphics-with-d3-js/&#34;&gt;Interactive graphics with d3.js&lt;/a&gt;, 2013-02-08&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2016/04/08/i-am-a-data-scientist/&#34;&gt;I am a data scientist&lt;/a&gt;, 2016-04-08&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a bunch of other things that I’ve written and quite like. Here’s a long list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2011/08/17/the-stupidest-r-code-ever/&#34;&gt;The stupidest R code ever&lt;/a&gt;, 2011-04-17&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/04/25/microarrays-suck/&#34;&gt;Microarrays suck&lt;/a&gt;, 2012-04-25&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/10/11/curved-arrows-in-r/&#34;&gt;Curved arrows in R&lt;/a&gt;, 2012-10-11&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/11/16/the-hopkins-sph-logo-part-1/&#34;&gt;The Hopkins SPH logo&lt;/a&gt;, parts &lt;a href=&#34;http://kbroman.org/blog/2012/11/16/the-hopkins-sph-logo-part-1/&#34;&gt;1 (2012-11-16)&lt;/a&gt;, &lt;a href=&#34;http://kbroman.org/blog/2012/11/21/the-hopkins-sph-logo-part-2/&#34;&gt;2 (2012-11-21)&lt;/a&gt;, and &lt;a href=&#34;http://kbroman.org/blog/2013/03/06/the-hopkins-sph-logo-part-3-karls-revenge/&#34;&gt;3 (2013-03-06)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/03/10/towards-making-my-own-papers-reproducible/&#34;&gt;Towards making my own papers reproducible&lt;/a&gt;, 2013-03-10&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/29/methods-before-results/&#34;&gt;Methods before results&lt;/a&gt;, 2013-04-29&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/08/knuth-journal-referees-should-assist-authors/&#34;&gt;Knuth: Journal referees should assist authors&lt;/a&gt;, 2013-04-08&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/05/data-science-is-statistics/&#34;&gt;Data science is statistics&lt;/a&gt;, 2013-04-05&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/05/17/chutes-ladders-how-long-is-this-going-to-take/&#34;&gt;Chutes &amp;amp; ladders: How long is this going to take?&lt;/a&gt; 2013-05-17&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/05/13/stack-exchange-why-i-dropped-out/&#34;&gt;Stack exchange: why I dropped out&lt;/a&gt;, 2013-05-13&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/09/25/hiring-computational-biologists/&#34;&gt;Hiring computational biologists&lt;/a&gt;, 2013-09-25&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/09/11/department-websites/&#34;&gt;Department websites&lt;/a&gt;, 2013-09-11&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/10/02/complaints-about-the-nih-grant-review-process/&#34;&gt;Complaints about the NIH grant review process&lt;/a&gt;, 2013-10-02&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/05/01/reform-academic-statistics/&#34;&gt;Reform academic statistics&lt;/a&gt;, 2014-05-01&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/08/12/if-i-could-do-it-over-again-id-self-publish/&#34;&gt;If I could do it over again, I’d self-publish&lt;/a&gt;, 2014-08-12&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/10/29/improved-graphs-of-car-crash-stats/&#34;&gt;Improved graphs of car crash stats&lt;/a&gt;, 2014-10-29&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/10/30/interactive-plot-of-car-crash-stats/&#34;&gt;Interactive plot of car crash stats&lt;/a&gt;, 2014-10-30&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/11/03/car-crash-stats-revisited-my-measurement-errors/&#34;&gt;Car crash stats revisited: My measurement errors&lt;/a&gt;, 2014-11-03&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2015/08/05/god-awful-conference-web-sites/&#34;&gt;God-awful conference websites&lt;/a&gt;, 2015-08-05&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2015/09/09/reproducibility-is-hard/&#34;&gt;Reproducibility is hard&lt;/a&gt;, 2015-09-09&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have also written a few advice-type posts on various academic matters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2011/09/29/seminars-bad-and-good/&#34;&gt;Seminars, bad and good&lt;/a&gt;, 2011-09-29&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2011/10/21/grant-writing/&#34;&gt;Tips on grant writing&lt;/a&gt;, 2011-10-21&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2012/05/23/what-should-i-do-badly/&#34;&gt;What should I do badly?&lt;/a&gt;, 2012-05-23&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/12/05/things-to-avoid-as-a-new-faculty-member/&#34;&gt;Things to avoid as a new faculty member&lt;/a&gt; 2013-12-05&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few more programming things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/04/03/beware-of-grep-with-a-list/&#34;&gt;Beware of &lt;code&gt;grep&lt;/code&gt; with a list&lt;/a&gt;, 2013-04-03&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/08/20/and-with-the-apply-functions/&#34;&gt;&lt;code&gt;[&lt;/code&gt; and &lt;code&gt;[[&lt;/code&gt; with the &lt;code&gt;apply()&lt;/code&gt; functions&lt;/a&gt;, 2013-08-20&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/04/29/with-the-apply-functions-revisited/&#34;&gt;&lt;code&gt;[&lt;/code&gt; with the &lt;code&gt;apply()&lt;/code&gt; functions, revisited&lt;/a&gt; 2014-04-29&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2013/08/06/read-the-source-code/&#34;&gt;Read the source code&lt;/a&gt;, 2013-08-06&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kbroman.org/blog/2014/02/12/emacs-key-bindings-in-ms-word/&#34;&gt;Emacs key bindings in MS Word&lt;/a&gt;, 2014-02-12&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>→ kbroman.org/blog</title>
      <link>https://kbroman.org/blog/2017/04/30/new_blog_site/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2017/04/30/new_blog_site/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m starting a new blog site at &lt;a href=&#34;http://kbroman.org/blog&#34;&gt;kbroman.org/blog&lt;/a&gt;. I&amp;rsquo;m abandoning the &lt;a href=&#34;https://kbroman.wordpress.com&#34;&gt;WordPress site&lt;/a&gt; as it is; I don&amp;rsquo;t want to fuss with trying to move things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>new blog</title>
      <link>https://kbroman.org/blog/2017/04/29/new-blog/</link>
      <pubDate>Sat, 29 Apr 2017 08:37:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/2017/04/29/new-blog/</guid>
      <description>&lt;p&gt;This is the new site for my blog; source at &lt;a href=&#34;https://github.com/kbroman/blog&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m going to leave my &lt;a href=&#34;https://kbroman.wordpress.com/&#34;&gt;old wordpress site&lt;/a&gt; as it is and not try to figure out how to move things over.&lt;/p&gt;
&lt;p&gt;I’m not been writing much recently, in part because Wordpress is such a drag to work with. The present site uses &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt;, which is a &lt;em&gt;joy&lt;/em&gt;. See the &lt;a href=&#34;https://bookdown.org/yihui/blogdown&#34;&gt;bookdown-based documentation&lt;/a&gt; (currently a bit thin) plus &lt;a href=&#34;https://proquestionasker.github.io/blog/Making_Site/&#34;&gt;Amber Thomas’s tutorial&lt;/a&gt; and the examples at &lt;a href=&#34;https://github.com/rbind&#34;&gt;github.com/rbind&lt;/a&gt;. Also see my &lt;a href=&#34;https://github.com/kbroman/ProgrammingNotes/blob/master/blogdown.md&#34;&gt;notes on how I constructed this site&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://kbroman.org/blog/about/</link>
      <pubDate>Sat, 29 Apr 2017 08:36:00 -0500</pubDate>
      
      <guid>https://kbroman.org/blog/about/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://kbroman.org&#34;&gt;Karl Broman&lt;/a&gt; is Professor in the
&lt;a href=&#34;https://www.biostat.wisc.edu&#34;&gt;Department of Biostatistics and Medical Informatics&lt;/a&gt;
at the &lt;a href=&#34;http://www.wisc.edu&#34;&gt;University of Wisconsin&amp;ndash;Madison&lt;/a&gt;;
research in statistical genetics; developer of
&lt;a href=&#34;http://rqtl.org&#34;&gt;R/qtl&lt;/a&gt; (for &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kbroman.org&#34;&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kbroman&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kwbroman&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kbroman.wordpress.com&#34;&gt;Old wordpress site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source for this site is at &lt;a href=&#34;https://github.com/kbroman/blog&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I thought maybe I was being paranoid</title>
      <link>https://kbroman.org/blog/2017/01/30/i-thought-maybe-i-was-being-paranoid/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2017/01/30/i-thought-maybe-i-was-being-paranoid/</guid>
      <description>

&lt;p&gt;An odd thing happened to me on twitter today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/uwsystem&#34;&gt;UW System&lt;/a&gt; had &lt;a href=&#34;https://twitter.com/UWSystem/status/826167903145775104&#34;&gt;tweeted a statement&lt;/a&gt; from system president &lt;a href=&#34;https://twitter.com/raywcross&#34;&gt;Ray Cross&lt;/a&gt; concerning Trump&amp;rsquo;s &lt;a href=&#34;https://www.nytimes.com/2017/01/27/us/politics/trump-syrian-refugees.html&#34;&gt;executive order&lt;/a&gt; banning refugees and immigrants from 7 countries. Cross&amp;rsquo;s statement is close to the most empty, useless possible such statement.&lt;/p&gt;

&lt;p&gt;So I &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;tweeted back&lt;/a&gt;, asking him to revise his statement and actually take a stand against Trump&amp;rsquo;s executive order.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;&lt;img src=&#34;https://kbroman.files.wordpress.com/2017/01/disappearedtweet.png&#34; alt=&#34;disappearedtweet&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that I mentioned not just &lt;a href=&#34;https://twitter.com/raywcross&#34;&gt;@RayWCross&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/uwsystem&#34;&gt;@UWSystem&lt;/a&gt;, but also &lt;a href=&#34;https://twitter.com/potus&#34;&gt;@POTUS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Twenty minutes later, the tweet had gotten a couple of ❤️&amp;rsquo;s, and then one RT, but for some reason the tweet itself had disappeared from my twitter feed (in the app I use, &lt;a href=&#34;https://tapbots.com/tweetbot/&#34;&gt;Tweetbot&lt;/a&gt;). I looked at &lt;a href=&#34;https://twitter.com/kwbroman&#34;&gt;my twitter account&lt;/a&gt; in a web browser, and sure enough the tweet wasn&amp;rsquo;t there.&lt;/p&gt;

&lt;p&gt;Puzzled, and knowing I hadn&amp;rsquo;t deleted the tweet, I poked around and was able to find, somehow, the URL for the original tweet, and I could see &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;the tweet&lt;/a&gt; in a browser. So it hadn&amp;rsquo;t been &lt;em&gt;deleted&lt;/em&gt;, it had just been removed from my feed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/kerri_gilbert&#34;&gt;@Kerri_Gilbert&lt;/a&gt; then &lt;a href=&#34;https://twitter.com/Kerri_Gilbert/status/826181462567297025&#34;&gt;wrote&lt;/a&gt; that she could see it in her feed but not if she went to my timeline. So I wasn&amp;rsquo;t completely crazy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/CFlensburg/&#34;&gt;@CFlensburg&lt;/a&gt; later &lt;a href=&#34;https://twitter.com/CFlensburg/status/826231062460129280&#34;&gt;wrote&lt;/a&gt; that he could see the tweet, but &lt;a href=&#34;https://twitter.com/CFlensburg/status/826232029549178880&#34;&gt;he&amp;rsquo;s in Australia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now my hypothesis was: someone who looks after &lt;a href=&#34;https://twitter.com/potus&#34;&gt;@potus&lt;/a&gt; had somehow suppressed my tweet. Or was I being paranoid?&lt;/p&gt;

&lt;p&gt;A quick google search (for &amp;ldquo;tweet disappeared from feed&amp;rdquo;) revealed a &lt;a href=&#34;https://www.washingtonpost.com&#34;&gt;Washington Post&lt;/a&gt; article from 2015-10-30, &amp;ldquo;&lt;a href=&#34;https://www.washingtonpost.com/news/the-intersect/wp/2015/10/30/a-guide-to-why-some-activists-believe-their-tweets-are-being-censored-in-the-u-s/&#34;&gt;Tweets are disappearing on Twitter. Why?&lt;/a&gt;&amp;rdquo; This seems to explain what happened: my tweet was suppressed by some kind of &amp;ldquo;abuse filter.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The article is an interesting read. It describes the experience of &lt;a href=&#34;http://members.efn.org/~paulmd/&#34;&gt;Paul Dietrich&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/paulmd199&#34;&gt;@Paulmd199&lt;/a&gt;), who wrote an analysis of his situation: &amp;ldquo;&lt;a href=&#34;http://members.efn.org/~paulmd/OwnWork/AdventuresinCensorship.pdf&#34;&gt;Adventures in Twitter Censorship.&lt;/a&gt;&amp;rdquo; Also an interesting read.&lt;/p&gt;

&lt;p&gt;And note that the tweet suppression is location-specific. It&amp;rsquo;s okay for &lt;a href=&#34;https://twitter.com/CFlensburg/&#34;&gt;Australians&lt;/a&gt; to read &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;the tweet&lt;/a&gt;, but Americans need to be protected from it.&lt;/p&gt;

&lt;h4 id=&#34;but-why-this-tweet&#34;&gt;But why this tweet?&lt;/h4&gt;

&lt;p&gt;This &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;tweet of mine&lt;/a&gt; was really a pretty bland tweet. I mean, I was directly criticizing my &lt;a href=&#34;http://www.med.wisc.edu/about/administration/robert-golden-md/38&#34;&gt;boss&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://chancellor.wisc.edu/about/&#34;&gt;boss&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://twitter.com/raywcross&#34;&gt;boss&lt;/a&gt;, and we &lt;a href=&#34;http://host.madison.com/wsj/news/local/education/university/regents-committee-passes-new-uw-madison-tenure-policy-with-changes/article_8249f119-05e7-5459-b4d8-25eab3e3882c.html&#34;&gt;just barely have tenure at Wisconsin&lt;/a&gt; anymore, so I certainly wasn&amp;rsquo;t going to be abusive. I&amp;rsquo;m not sure why I actually mentioned &lt;a href=&#34;https://twitter.com/potus&#34;&gt;@potus&lt;/a&gt;, but I figured, &amp;ldquo;What the hell.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;But what sort of abuse detection algorithm would decide that &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;this tweet&lt;/a&gt; was abusive? If there&amp;rsquo;s an abuse filter that would suppress &lt;a href=&#34;https://twitter.com/kwbroman/status/826174494096109568&#34;&gt;this tweet&lt;/a&gt; but not all of the actual abuse rampant on twitter&amp;hellip;well that&amp;rsquo;s bullshit.&lt;/p&gt;

&lt;p&gt;Maybe it was that I wrote &amp;ldquo;Sad.&amp;rdquo; (I thought that was funny. And hardly abusive.)&lt;/p&gt;

&lt;p&gt;I favor the theory that it wasn&amp;rsquo;t an algorithm but rather a person: that someone is assigned to read all mentions of &lt;a href=&#34;https://twitter.com/potus&#34;&gt;@potus&lt;/a&gt; and if they deem something inappropriate, they flip a switch and the tweet gets suppressed.&lt;/p&gt;

&lt;p&gt;So maybe I &lt;em&gt;am&lt;/em&gt; paranoid.&lt;/p&gt;

&lt;p&gt;(I forgot to mention: &lt;a href=&#34;https://twitter.com/nickfleisher&#34;&gt;@NickFleisher&lt;/a&gt; had the best response to &lt;a href=&#34;https://twitter.com/UWSystem/status/826167903145775104&#34;&gt;Ray Cross&amp;rsquo;s lame statement&lt;/a&gt;: &amp;ldquo;&lt;a href=&#34;https://twitter.com/nickfleisher/status/826184115456143360&#34;&gt;Revise and resubmit&lt;/a&gt;.&amp;ldquo;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Halloween 2016 count</title>
      <link>https://kbroman.org/blog/2016/10/31/halloween-2016-count/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/10/31/halloween-2016-count/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a graph of the numbers of trick-or-treat-ers we saw this evening, by time. 10 of the 25 kids arrived in one big group. (Compare this to our &lt;a href=&#34;http://kbroman.org/blog/2011/10/31/halloween-2011-count/&#34;&gt;2011 experience&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kbroman.files.wordpress.com/2016/10/halloween20161.png&#34; alt=&#34;Halloween 2016 count&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My JSM 2016 itinerary</title>
      <link>https://kbroman.org/blog/2016/07/27/my-jsm-2016-itinerary/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/07/27/my-jsm-2016-itinerary/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/&#34;&gt;Joint Statistical Meetings&lt;/a&gt; are in Chicago next week. I thought I&amp;rsquo;d write down the set of sessions that I plan to attend. Please let me know if you have further suggestions.&lt;/p&gt;

&lt;p&gt;First things first: &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/spotlightchicago.cfm&#34;&gt;snacks&lt;/a&gt;. Search &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/index.cfm&#34;&gt;the program&lt;/a&gt; for &amp;ldquo;spotlight&amp;rdquo; or &amp;ldquo;while supplies last&amp;rdquo; for the free snacks being offered. Or go to the &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/spotlightchicago.cfm&#34;&gt;page with the full list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;sunday&#34;&gt;Sunday&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;2:00 - 3:50&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212387&#34;&gt;Open source statistical software for data science&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Skipper Seabold on &lt;em&gt;Software Engineering&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jake VanderPlas on &lt;em&gt;Python&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Doug Bates on &lt;em&gt;Julia&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dirk Eddelbuettel on &lt;em&gt;Rcpp&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Kane on &lt;em&gt;Grammars &amp;amp; structures in R, Python, and Julia&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;4:00-5:50&lt;/em&gt;) Hard choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212571&#34;&gt;Sequencing association studies and rare-variant analysis for complex traits&lt;/a&gt; with Gonçalo Abecasis, Xihong Lin, Seunggeun Lee, Iuliana Ionita-Laza&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212579&#34;&gt;Extraordinary impact of statistics&lt;/a&gt;, with David Siegmund, Heike Hofmann, and Sally Morton&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212531&#34;&gt;Precision medicine&lt;/a&gt; with Kim-Anh Do, Hongzhe Li, and Li Hsu (and with Bhramar Mukherjee as discussant)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212366&#34;&gt;Media and statistics&lt;/a&gt; with Howard Wainer, Barry Nussbaum, Julie Rehmeyer, and Don Berry (and Andrew Gelman as discussant)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212554&#34;&gt;Information visualization&lt;/a&gt; with Jorge Poco, Anushka Anand, Zan Armstrong, Zhicheng Liu, and Gordon Kindlmann (organized by Yihui Xie)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;6:00 - 8:00&lt;/em&gt;) Opening Mixer &amp;amp; &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=213079&#34;&gt;Invited posters&lt;/a&gt; (featuring Garrentt Grolemund, Tian Zheng, Liz Sweeney, David Robinson, Hilary Parker, Alyssa Frazee, and Jeff Leek)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;monday&#34;&gt;Monday&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;8:30-10:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212543&#34;&gt;Applied data visualization&lt;/a&gt; (organized by Hilary Parker)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hadley Wickham on &lt;em&gt;Linked brushing in R&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Andreas Gros on &lt;em&gt;Data vis at Facebook&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lynn Cherny on &lt;em&gt;Cocktail party horror stories about data vis for clients&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Andrei Scheinkman on &lt;em&gt;Data vis at 538&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jeff Leek on &lt;em&gt;Teaching data vis to 100k data scientists&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also of interest: &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212462&#34;&gt;Introductory Overview on Causal Inference by Judea Pearl&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;10:30 - 12:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212335&#34;&gt;Statistics in genomics and genetics&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;John Storey on &lt;em&gt;latent variable methods&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rafael Irizarry on &lt;em&gt;overcoming bias and batch effects in RNA-seq data&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kathryn Roeder on &lt;em&gt;testing high-dim differential matrices&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Newton on &lt;em&gt;Graph-restricted mixture models&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;4:45-6:15&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212656&#34;&gt;ASA President&amp;rsquo;s invited address&lt;/a&gt;: Joe Palca (NPR) on &lt;em&gt;Science and news: A marriage of convenience&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tuesday&#34;&gt;Tuesday&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;8:30 - 10:20&lt;/em&gt;) Hard choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212431&#34;&gt;Statistical genetics for large-scale genomic data&lt;/a&gt; with Mary Sara McPeek, Timothy Thornton, Michael Epstein, and Michael Wu&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212463&#34;&gt;Intro Overview on Data science&lt;/a&gt; with Philip Yu and Michael Jordon&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212804&#34;&gt;Microbiome data analysis&lt;/a&gt; with Xiang Zhan, Pixu Shi, Georg Gerber, Hyunwook Koh, and Richard Bonneau&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;10:30-12:20&lt;/em&gt;) Hard choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212466&#34;&gt;Data journalism and statistical expertise&lt;/a&gt; with Regina Nuzzo, Alberto Cairo, Mark Hansen, Carl Bialik, and Katherine Hobson&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212444&#34;&gt;Data in and outside the undergrad classroom&lt;/a&gt; with Ani Adhikari, Mark Daniel Ward, Robert Gould, and Colin Rundel (organized by Mine Cetinkaya-Rundel)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;2:05-3:50&lt;/em&gt;) Hard choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212483&#34;&gt;Single-cell RNA-seq&lt;/a&gt; with Raphael Gottardo, John Marioni, Rahul Satija, and Stephanie Hicks (organized by Rafael Irizarry)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212415&#34;&gt;The 3d Genome&lt;/a&gt; with Mark Segal, Zhaohui Qin, Zheng Xu, and Deepak Nag Ayyala (organized by Shili Lin)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212551&#34;&gt;Interactive visualizations&lt;/a&gt; with Vincent Nijs, Ryan Hafen, Joseph Cheng, John Muschelli, Carson Sievert, and Yihui Xie (organized by Ramnath Vaidyanathan&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212715&#34;&gt;Integrative data analyses&lt;/a&gt; with Sunduz Keles, Yuan Jiang, Yongdai Kim, and Jun Xie&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;8:00-9:30&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212655&#34;&gt;ASA President&amp;rsquo;s Address&lt;/a&gt;: Jessica Utts on &lt;em&gt;Appreciating statistics&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wednesday&#34;&gt;Wednesday&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;8:30 - 10:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212538&#34;&gt;Reproducibility in statistics and data science&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jenny Bryan&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;me&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Karthik Ram&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mine Cetinkaya-Rundel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Yihui Xie (discussant)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;10:35 - 12:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212769&#34;&gt;2016 Statistical computing and graphics award honors William S. Cleveland&lt;/a&gt; with Nicholas Fisher, Dianne Cook, Luke-Jon Tierney, Steve Scott, and Jim Harner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;2:05 - 3:50&lt;/em&gt;) Hard choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212439&#34;&gt;Batch effects in genomics data&lt;/a&gt; with Claire Ruberman, Jingshu Wang, Jennifer Listgarten, Davide Risso, and Florian Buettner&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212489&#34;&gt;Genomics and epigenomics data&lt;/a&gt; with Ker-Chau Li, Yuping Zhang, Hongkai Ji, Guo-Cheng Yuan, and Hao Wu&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212826&#34;&gt;When the plot is not the end: computing and reasoning on data visualizations&lt;/a&gt; with Barrett Schloerke, Haley Jeppson, Gabriel Becker, and Hector Corrada Bravo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;4:45-6:15&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212657&#34;&gt;Fisher Lecture&lt;/a&gt;: Alice Whittemore on Personalizing disease prevention&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thursday&#34;&gt;Thursday&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(&lt;em&gt;8:35 - 10:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212487&#34;&gt;Julia for modern statistical computing&lt;/a&gt; with Josh Day, John Myles White, Stefan Karpinski, and Jiahao Chen (and Doug Bates as discussant)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(&lt;em&gt;10:35-12:20&lt;/em&gt;) &lt;a href=&#34;https://www.amstat.org/meetings/jsm/2016/onlineprogram/ActivityDetails.cfm?SessionID=212302&#34;&gt;Showcasing statistics and public policy&lt;/a&gt; with Andrew Gelman, Peter Imrey, and J. R. Lockwood (and David Banks as discussant)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chris Walker at Faculty Senate</title>
      <link>https://kbroman.org/blog/2016/04/15/chris-walker-at-faculty-senate/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/04/15/chris-walker-at-faculty-senate/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.dance.wisc.edu/dance/people/faculty/chris-walker&#34;&gt;Chris Walker&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://mediaspace.wisc.edu/media/Professor+Chris+Walker/1_5k9npnxs&#34;&gt;powerful speech&lt;/a&gt; at the Faculty Senate on 4 Apr 2016 (see &amp;ldquo;&lt;a href=&#34;http://kbroman.org/blog/2016/04/04/hateful-shit-at-uw-madison/&#34;&gt;Hateful shit at UW-Madison&lt;/a&gt;&amp;rdquo;) was &lt;a href=&#34;https://mediaspace.wisc.edu/media/Professor+Chris+Walker/1_5k9npnxs&#34;&gt;recorded&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mediaspace.wisc.edu/media/Professor+Chris+Walker/1_5k9npnxs&#34;&gt;You &lt;em&gt;must&lt;/em&gt; listen to it!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I am a data scientist</title>
      <link>https://kbroman.org/blog/2016/04/08/i-am-a-data-scientist/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/04/08/i-am-a-data-scientist/</guid>
      <description>&lt;p&gt;Three years ago this week, I wrote a blog post, &amp;ldquo;&lt;a href=&#34;http://kbroman.org/blog/2013/04/05/data-science-is-statistics/&#34;&gt;Data science is statistics&lt;/a&gt;&amp;rdquo;. I was fiercely against the term at that time, as I felt that we already had a &lt;em&gt;data science&lt;/em&gt;, and it was called &lt;em&gt;Statistics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It was a short post, so I might as well quote the whole thing:&lt;/p&gt;

&lt;blockquote&gt;When physicists do mathematics, they don&#39;t say they&#39;re doing &#34;number science&#34;. They&#39;re doing math.

If you&#39;re analyzing data, you&#39;re doing statistics. You can call it data science or informatics or analytics or whatever, but it&#39;s still statistics.

If you say that one kind of data analysis is statistics and another kind is not, you&#39;re not allowing innovation. We need to define the field broadly.

You may not like what some statisticians do. You may feel they don&#39;t share your values. They may embarrass you. But that shouldn&#39;t lead us to abandon the term &#34;statistics&#34;.&lt;/blockquote&gt;

&lt;p&gt;I still sort of feel that way, but I must admit that &lt;em&gt;my&lt;/em&gt; definition of &amp;ldquo;statistics&amp;rdquo; is rather different than most others&amp;rsquo; definition. In my view, a good statistician will consider &lt;em&gt;all&lt;/em&gt; aspects of the data analysis process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the broader context of a scientific question&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;study design&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;data handling, organization, and integration&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;data cleaning&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;data visualization&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exploratory data analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;formal inference methods&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;clear communication of results&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;development of useful and trustworthy software tools&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;actually answering real questions&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m sure I missed some things there, but my main point is that most academic statisticians focus solely on developing &amp;ldquo;sophisticated&amp;rdquo; methods for formal inference, and while I agree that that is an important piece, in my experience as an applied statistician, the other aspects are often of vastly greater importance. In many cases, we don&amp;rsquo;t need to develop sophisticated new methods, and most of my effort is devoted to the other aspects, and these are generally treated as being unworthy of consideration by academic statisticians.&lt;/p&gt;

&lt;p&gt;As I wrote in a later post, &amp;ldquo;&lt;a href=&#34;http://kbroman.org/blog/2014/05/01/reform-academic-statistics/&#34;&gt;Reform academic statistics&lt;/a&gt;&amp;rdquo;, we as a field appear satisfied with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Papers that report new methods with no usable software&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Applications that focus on toy problems&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Talks that skip the details of the scientific context of a problem&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data visualizations that are both ugly and ineffective&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discussions of &lt;em&gt;Data Science&lt;/em&gt; generally recognize the full range of activities that are required for the analysis of data, and place greater value on such things as data visualization and software tools which are &lt;em&gt;obviously&lt;/em&gt; important but not viewed so by many statisticians.&lt;/p&gt;

&lt;p&gt;And so I&amp;rsquo;ve come to &lt;em&gt;embrace&lt;/em&gt; the term Data Science.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Data Science&lt;/em&gt; is also a much more straightforward and understandable label for what I do. I don&amp;rsquo;t think we should &lt;em&gt;need&lt;/em&gt; a new term, and I think we should argue against misunderstandings of Statistics rather than slink off to a new &amp;ldquo;brand&amp;rdquo;. But in general, when I talk about Data Science, I feel I can better trust that folks will understand that I am talking about the broad set of activities required in good data analysis.&lt;/p&gt;

&lt;p&gt;If people ask me what I do, I&amp;rsquo;ll continue to say that I&amp;rsquo;m a Statistician, even though I do tend to stumble over the word. But I am also a &lt;em&gt;Data Scientist&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One last thing: I&amp;rsquo;ve also come to realize that computer science folks working in computational biology are really just like me. They have expertise in a somewhat different set of tools, but then that&amp;rsquo;s true for pretty much every statistician, too: they&amp;rsquo;re much like me but they have expertise in a somewhat different set of tools. And it&amp;rsquo;s nice to be able to say that &lt;em&gt;we&amp;rsquo;re all data scientists&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It should be recognized, too, that academic computer science suffers from many of the same problems that academic statistics has suffered: an overemphasis on novelty, sophistication, and toy applications, and an under-appreciation for solving real problems, for data visualization, and for useful software tools.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Action items in response to hateful shit</title>
      <link>https://kbroman.org/blog/2016/04/05/action-items-in-response-to-hateful-shit/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/04/05/action-items-in-response-to-hateful-shit/</guid>
      <description>&lt;p&gt;UW-Madison faculty got an email update from Vice Provost and Chief Diversity Officer Patrick Sims regarding the things we can do in response to the hate and bias incidents on campus.&lt;/p&gt;

&lt;p&gt;Here are the things he had mentioned yesterday at the Faculty Senate meeting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Address hate/bias incidents in your curriculum to ameliorate unacceptable occurrences in our campus community.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Look at &amp;ldquo;bullying&amp;rdquo; language as a way to address possible hate/bias incidents in the classroom.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit to engaging in ongoing cultural competency training. &lt;a href=&#34;http://www.library.wisc.edu/lcice/&#34;&gt;Learning Communities for Institutional Change &amp;amp; Excellence (LCICE)&lt;/a&gt; as an infrastructure already provides these services campus-wide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit to experiencing the &lt;a href=&#34;http://www.library.wisc.edu/lcice/&#34;&gt;leadership institute&lt;/a&gt; and become a facilitator, carving out 10-15% of your time towards these efforts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support the request for additional staff.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visit &lt;a href=&#34;https://campusclimate.wisc.edu&#34;&gt;the Campus Climate website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An attached letter from the Hate &amp;amp; Bias incident team added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your school/college/department can host a bystander intervention workshop on hate and bias. This workshop will provide tools for UW-Madison community members on when and how to intervene. If you would like to host a workshop, please contact &lt;a href=&#34;mailto:Joshua.johnson@wisc.edu&#34;&gt;Joshua Moon Johnson&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Many incidents go unreported for a variety of reasons. We encourage students and campus community members to &lt;a href=&#34;www.students.wisc.edu/reporthate&#34;&gt;report incidents of hate and bias&lt;/a&gt; to ensure that campus can best support the victim and work to prevent future incidents. We encourage you to post &lt;a href=&#34;www.students.wisc.edu/reporthate&#34;&gt;the link to report&lt;/a&gt; on your school/college/department websites.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Oftentimes students do not report incidents because they are unaware of the reporting process. To increase awareness of the reporting process, we encourage you to share brochures and posters with information on how and why it is important to report. These will be distributed across campus in the next few weeks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Students who are victims of hate and bias incidents may need immediate support. Please be sure to refer/provide students with appropriate resources such as mental health/counseling services through University Health Services (UHS). The &lt;a href=&#34;http://msc.wisc.edu&#34;&gt;Multicultural Student Center&lt;/a&gt; also has drop-in hours with UHS counselors as well as support and discussions groups for students of color.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Many students who are victims of hate and bias incidents identify with an underrepresented racial group, gender identity or sexual orientation, or religious group. We encourage you to specifically reach out to marginalized student groups to raise awareness of the bystander intervention workshop and reporting process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got a reasonably positive response to &lt;a href=&#34;http://kbroman.org/blog/2016/04/04/hateful-shit-at-uw-madison/&#34;&gt;my email to my faculty colleagues&lt;/a&gt; suggesting that we all commit to cultural competency training. But the training from the &lt;a href=&#34;http://www.library.wisc.edu/lcice/&#34;&gt;LCICE&lt;/a&gt; mentioned above looks to be semester-long, Tuesdays 4:30-7:30pm. I think I&amp;rsquo;ll have a difficult time convincing my colleagues of that. We need something in between nothing and 45 hours.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hateful shit at UW-Madison</title>
      <link>https://kbroman.org/blog/2016/04/04/hateful-shit-at-uw-madison/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2016/04/04/hateful-shit-at-uw-madison/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a privileged white male university professor. As privileged as they come, really. My father was a professor of chemistry; my mother also has an advanced degree in chemistry. The jobs I&amp;rsquo;ve held have been more about personal fulfillment than money: dancer, dance teacher, secretary for intellectual property lawyers, research and teaching assistant, professor. People assume I know what I&amp;rsquo;m talking about, even if I&amp;rsquo;m in shorts and a t-shirt.&lt;/p&gt;

&lt;p&gt;All that&amp;rsquo;s just to say that, when it comes to the ongoing hateful acts that have been happening at the University of Wisconsin-Madison, I&amp;rsquo;m really the last one that you should be listening to. You should instead listen to UW students, such as the &lt;a href=&#34;http://www.unitedcouncilofuw.org/&#34;&gt;United Council of UW Students&lt;/a&gt;, who have submitted &lt;a href=&#34;http://www.unitedcouncilofuw.org/the-student-voice/2016/2/24/blackout-uw-system-administration-press-release-1212016&#34;&gt;a list of 5 reasonable demands&lt;/a&gt;, or Vice Provost and Chief Diversity Officer &lt;a href=&#34;http://provost.wisc.edu/climate.htm&#34;&gt;Patrick Sims&lt;/a&gt;, who made an &lt;a href=&#34;https://www.youtube.com/watch?v=zMBQUzwnCL0&amp;amp;feature=youtu.be&#34;&gt;important 8-min video&lt;/a&gt; in response to a recent hateful incident that you should now go away and watch (really, stop reading what I have to say and spend 8 minutes watching that video), or &lt;a href=&#34;https://www.dance.wisc.edu/dance/people/faculty/chris-walker&#34;&gt;Chris Walker&lt;/a&gt;, Asst Prof in the dance department, who spoke movingly today at the UW-Madison Faculty Senate meeting about the shit that faculty and students of color have to put up with on campus.&lt;/p&gt;

&lt;p&gt;Lot&amp;rsquo;s of crap has been happening in Wisconsin lately. My focus has been on what Scott Walker and company have been doing to the state and to the University of Wisconsin, most recently by making huge cuts to state support to the UW System and by weakening tenure and shared governance.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all been an embarrassment, and depressing, but in comparison to the hateful racist shit that&amp;rsquo;s been happening on campus, and Vice Provost Sims reported that there have been &amp;gt;30 &lt;em&gt;reported&lt;/em&gt; hate or bias incidents on campus this year, tenure and funding just don&amp;rsquo;t seem that important.&lt;/p&gt;

&lt;p&gt;Chris Walker&amp;rsquo;s speech at the Faculty Senate today really hammered this home. As a black man on campus, he&amp;rsquo;s experienced a lot of shit: worse shit then we&amp;rsquo;re seeing in the papers. And if we don&amp;rsquo;t fix this, our students can&amp;rsquo;t be successful. We &lt;em&gt;must&lt;/em&gt; fix this.&lt;/p&gt;

&lt;p&gt;What can a biostatistics professor do? I&amp;rsquo;m open to suggestions.&lt;/p&gt;

&lt;p&gt;But for now, I&amp;rsquo;ll follow Patrick Sims&amp;rsquo;s suggestion and start with one of the &lt;a href=&#34;http://www.unitedcouncilofuw.org/the-student-voice/2016/2/24/blackout-uw-system-administration-press-release-1212016&#34;&gt;United Council of UW Students&amp;rsquo; demands&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;We demand that the University of Wisconsin System creates and enforces comprehensive racial awareness and inclusion curriculum and trainings throughout all 26 UW Institution departments, mandatory for all students, faculty, staff, campus &amp; system administration, and regents. This curriculum and training must be vetted, maintained, and overseen by a board comprised of students, staff, and faculty of color.&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve written an email to the faculty in &lt;a href=&#34;http://www.biostat.wisc.edu&#34;&gt;my department&lt;/a&gt;, asking that we, as a department, &lt;em&gt;volunteer&lt;/em&gt; to participate in such racial awareness training:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kbroman.files.wordpress.com/2016/04/email_to_dept1.png&#34; alt=&#34;email_to_dept&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correction&lt;/strong&gt;: There&amp;rsquo;s an error in my email; Chris Walker is Associate Professor, and has been for a couple of years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Chris Walker&amp;rsquo;s speech at the 4 Apr 2016 Faculty Senate meeting was &lt;a href=&#34;https://mediaspace.wisc.edu/media/Professor+Chris+Walker/1_5k9npnxs&#34;&gt;recorded&lt;/a&gt;! Must listen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write unit tests!</title>
      <link>https://kbroman.org/blog/2015/12/07/write-unit-tests/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2015/12/07/write-unit-tests/</guid>
      <description>&lt;p&gt;Since 2000, I&amp;rsquo;ve been working on &lt;a href=&#34;http://rqtl.org&#34;&gt;R/qtl&lt;/a&gt;, an R package for mapping the genetic loci (called quantitative trait loci, QTL) that contribute to variation in quantitative traits in experimental crosses. The &lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/publications/rqtl.pdf&#34;&gt;Bioinformatics paper about it&lt;/a&gt; is my most cited; also see my 2014 JORS paper, &amp;ldquo;&lt;a href=&#34;https://www.biostat.wisc.edu/~kbroman/publications/rqtl_14yrs.pdf&#34;&gt;Fourteen years of R/qtl: Just barely sustainable&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a bit of a miracle that R/qtl works and gives the right answers, as it includes essentially no formal tests. The only regular tests are that the examples in the help files don&amp;rsquo;t produce any errors that halt the code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve recently been working on &lt;a href=&#34;http://kbroman.org/qtl2&#34;&gt;R/qtl2&lt;/a&gt;, a reimplementation of R/qtl to better handle high-dimensional data and more complex crosses, such as &lt;a href=&#34;http://www.genetics.org/content/190/2/437.short&#34;&gt;Diversity Outbred mice&lt;/a&gt;. In doing so, I&amp;rsquo;m trying to make use of the software engineering principles that I&amp;rsquo;ve learned over the last 15 years, which pretty much correspond to the ideas in &amp;ldquo;&lt;a href=&#34;http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745&#34;&gt;Best Practices for Scientific Computing&lt;/a&gt;&amp;rdquo; (&lt;a href=&#34;http://www.third-bit.com/&#34;&gt;Greg Wilson&lt;/a&gt; et al., PLOS Biology 12(1): e1001745, &lt;a href=&#34;http://doi.org/10.1371/journal.pbio.1001745&#34;&gt;doi:10.1371/journal.pbio.1001745&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still working on &amp;ldquo;Make names consistent, distinctive, and meaningful&amp;rdquo;, but I&amp;rsquo;m doing pretty well on writing shorter functions with less repeated code, and &lt;em&gt;particularly importantly&lt;/em&gt; I&amp;rsquo;m writing extensive unit tests.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The basic idea is to break up your code into small functions that ideally do just one thing. (These are the &amp;ldquo;units&amp;rdquo;.) And then write tests that explicitly check whether those functions are giving the correct answers. That is, don&amp;rsquo;t just test that the code &lt;em&gt;runs&lt;/em&gt;; you want to know that your code is &lt;em&gt;giving the right answers&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Last week, I was working on implementing a basic genome scan function. I included the option of doing weighted least squares with known weights, because it&amp;rsquo;s easy enough to do, and R/qtl had done that. (I&amp;rsquo;ve never actually &lt;em&gt;used&lt;/em&gt; that feature, but it&amp;rsquo;s been there.) And my results were matching those that R/qtl provided. Well, mostly: in the case of multiple phenotypes, with some phenotypes having missing values, and when doing a weighted analysis, the results from R/qtl and R/qtl2 were quite different.&lt;/p&gt;

&lt;p&gt;I expect you may be questioning the logic of testing code by comparing it to software that has not been formally tested. I was thinking the same thing. And so I wrote some tests that compared results to those using &lt;a href=&#34;http://www.r-project.org&#34;&gt;R&lt;/a&gt;&amp;rsquo;s &lt;code&gt;lm()&lt;/code&gt; function. And (surprise) the results from &lt;code&gt;lm()&lt;/code&gt; matched R/qtl2 but not R/qtl. So it was R/qtl that was the problem.&lt;/p&gt;

&lt;p&gt;So that had me debugging the &lt;a href=&#34;https://github.com/kbroman/qtl/blob/master/R/scanone.R&#34;&gt;&lt;code&gt;scanone&lt;/code&gt; function in R/qtl&lt;/a&gt;, the R code for which is &lt;strong&gt;831&lt;/strong&gt; lines long and was written according to the principle, &amp;ldquo;I&amp;rsquo;ll just add this one thing and then clean things up later,&amp;rdquo; with &amp;ldquo;later&amp;rdquo; really meaning &amp;ldquo;never&amp;rdquo;, and &amp;ldquo;this one thing&amp;rdquo; really meaning &amp;ldquo;all the things.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I did, after resorting to a bunch of print/cat statements, &lt;a href=&#34;https://github.com/kbroman/qtl/commit/254a1c728&#34;&gt;find the bug&lt;/a&gt;. In subsetting the data to remove individuals with missing values, I&amp;rsquo;d forgotten to subset the weights. Back in 2012, I&amp;rsquo;d &lt;a href=&#34;https://github.com/kbroman/qtl/commit/a07c575&#34;&gt;fixed a related bug&lt;/a&gt;, but apparently it was only a partial fix. In thinking about the bug again while writing this post, and in looking back at the 2012 bug fix, I realized that I probably had the same bug in &lt;a href=&#34;https://github.com/kbroman/qtl/blob/master/R/scantwo.R&#34;&gt;&lt;code&gt;scantwo&lt;/code&gt;&lt;/a&gt; (which is &lt;strong&gt;1443&lt;/strong&gt; lines long). Sure enough, and so now there&amp;rsquo;s &lt;a href=&#34;https://github.com/kbroman/qtl/commit/c71b3dfce9&#34;&gt;yet another bug fix&lt;/a&gt;, though not yet on &lt;a href=&#34;http://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thebird.nl/&#34;&gt;Pjotr Prins&lt;/a&gt; was the first to encourage me towards software testing. &lt;a href=&#34;http://had.co.nz/&#34;&gt;Hadley Wickham&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/hadley/testthat&#34;&gt;testthat&lt;/a&gt; package makes it easy to do in R packages. In his &lt;a href=&#34;https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf&#34;&gt;paper about testthat&lt;/a&gt;, Hadley wrote:&lt;/p&gt;

&lt;blockquote&gt;It&#39;s not that we don&#39;t test our code, it&#39;s that we don&#39;t store our tests so they can be re-run automatically.
&lt;/blockquote&gt;

&lt;p&gt;This is my favorite comment on testing; it totally applies to (old) me.&lt;/p&gt;

&lt;p&gt;The bottom line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write unit tests.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you find a bug, first write a test for it and then fix the bug.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you find a bug, look for other possible instances of that bug, and fix them too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about testing in R packages, see the &lt;a href=&#34;http://r-pkgs.had.co.nz/tests.html&#34;&gt;Testing&lt;/a&gt; chapter in Hadley&amp;rsquo;s &lt;a href=&#34;amazon.com/exec/obidos/ASIN/1491910593/7210-20&#34;&gt;R packages book&lt;/a&gt;. Also see the &lt;a href=&#34;http://kbroman.org/Tools4RR/assets/lectures/09_testdebug_withnotes.pdf&#34;&gt;slides for my lecture on testing and debugging&lt;/a&gt; in my &lt;a href=&#34;http://kbroman.org/Tools4RR/&#34;&gt;Tools for Reproducible Research&lt;/a&gt; course.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fitting linear mixed models for QTL mapping</title>
      <link>https://kbroman.org/blog/2015/11/24/fitting-linear-mixed-models-for-qtl-mapping/</link>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2015/11/24/fitting-linear-mixed-models-for-qtl-mapping/</guid>
      <description>&lt;p&gt;Linear mixed models (LMMs) have become widely used for dealing with population structure in human GWAS, and they&amp;rsquo;re becoming increasing important for QTL mapping in model organisms, particularly for the analysis of advanced intercross lines (AIL), which often exhibit variation in the relationships among individuals.&lt;/p&gt;

&lt;p&gt;In my efforts on &lt;a href=&#34;http://kbroman.org/qtl2&#34;&gt;R/qtl2&lt;/a&gt;, a reimplementation &lt;a href=&#34;http://rqtl.org&#34;&gt;R/qtl&lt;/a&gt; to better handle high-dimensional data and more complex cross designs, it was clear that I&amp;rsquo;d need to figure out LMMs. But while &lt;a href=&#34;http://www.jstatsoft.org/article/view/v067i01&#34;&gt;papers explaining the fit of LMMs&lt;/a&gt; seem quite explicit and clear, I&amp;rsquo;d never quite turned the corner to actually seeing how I&amp;rsquo;d implement it. In both reading papers and studying code (e.g., &lt;a href=&#34;https://github.com/lme4/lme4/&#34;&gt;lme4&lt;/a&gt;), I&amp;rsquo;d be going along fine and then get completely lost part-way through.&lt;/p&gt;

&lt;p&gt;But I now finally understand LMMs, or at least a particular, simple LMM, and I&amp;rsquo;ve been able to write an implementation: the R package &lt;a href=&#34;http://kbroman.org/lmmlite&#34;&gt;lmmlite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seemed worthwhile to write down some of the details.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The model I want to fit is &lt;em&gt;y = X b + e&lt;/em&gt;, where var(&lt;em&gt;e&lt;/em&gt;) = &lt;em&gt;sK + tI&lt;/em&gt;, where &lt;em&gt;K&lt;/em&gt; is a known kinship matrix and &lt;em&gt;I&lt;/em&gt; is the identity matrix. Think of &lt;em&gt;y&lt;/em&gt; as a vector of phenotypes and &lt;em&gt;X&lt;/em&gt; as a matrix of covariates. Let &lt;em&gt;v = s+t&lt;/em&gt; be the residual variance, and let &lt;em&gt;h = s/(s+t) = s/v&lt;/em&gt; be the heritability.&lt;/p&gt;

&lt;p&gt;First, a shout to &lt;a href=&#34;https://github.com/lomereiter&#34;&gt;Artem Tarasov&lt;/a&gt;, who wrote a &lt;a href=&#34;http://lomereiter.github.io/2015/02/16/lmm_cov.html&#34;&gt;series of blog posts&lt;/a&gt; walking through and explaining the source code for &lt;a href=&#34;https://github.com/MicrosoftGenomics/FaST-LMM&#34;&gt;FaST-LMM&lt;/a&gt; and &lt;a href=&#34;https://github.com/nickFurlotte/pylmm&#34;&gt;pylmm&lt;/a&gt;, and to &lt;a href=&#34;http://whatmind.com/&#34;&gt;Nick Furlotte&lt;/a&gt;, whose &lt;a href=&#34;https://github.com/nickFurlotte/pylmm&#34;&gt;pylmm&lt;/a&gt; code is especially clear and easy-to-read. Only by reading their work did I come to understand these LMMs.&lt;/p&gt;

&lt;p&gt;Back to the model fit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For a fixed value of the heritability, &lt;em&gt;h&lt;/em&gt;, we have var(&lt;em&gt;e&lt;/em&gt;) = &lt;em&gt;v[hK + (1-h)I] = vV&lt;/em&gt; where &lt;em&gt;V&lt;/em&gt; is known. And so we end up with a general least squares problem, which we can fit in order to estimate &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And actually, if you take the eigen decomposition of &lt;em&gt;K&lt;/em&gt;, say &lt;em&gt;K = UDU&amp;rsquo;&lt;/em&gt;, it turns out that you can write &lt;em&gt;hK + (1-h)I = hUDU&amp;rsquo; + (1-h)UU&amp;rsquo; = U[hD + (1-h)I]U&amp;rsquo;&lt;/em&gt;. That is, the eigenvectors of &lt;em&gt;K&lt;/em&gt; are the same as the eigenvectors of &lt;em&gt;hK + (1-h)I&lt;/em&gt;. And so if you pre-multiply &lt;em&gt;y&lt;/em&gt; and &lt;em&gt;X&lt;/em&gt; by &lt;em&gt;U&amp;rsquo;&lt;/em&gt;, you end up with a weighted least squares problem, which is way faster to fit than a general least squares problem.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Having fit the weighted least squares problem to estimate &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;, you can then calculate the corresponding log likelihood (or, better, the restricted log likelihood, if you want to do REML).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You&amp;rsquo;re then left with a one-dimensional optimization problem (optimizing the log likelihood over &lt;em&gt;h&lt;/em&gt;), which you can solve by &lt;a href=&#34;https://en.wikipedia.org/wiki/Brent%27s_method&#34;&gt;Brent&amp;rsquo;s method&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems quite obvious in retrospect. It&amp;rsquo;s a bit embarrassing that it&amp;rsquo;s taken me so long to come to this understanding.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://kbroman.org/lmmlite&#34;&gt;lmmlite&lt;/a&gt;, I implemented this algorithm (closely following the code in &lt;a href=&#34;https://github.com/nickFurlotte/pylmm&#34;&gt;pylmm&lt;/a&gt;) twice: in plain R, and then in C++ (using &lt;a href=&#34;https://github.com/RcppCore/RcppEigen&#34;&gt;RcppEigen&lt;/a&gt;, which is an interface to the &lt;a href=&#34;http://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen&lt;/a&gt; C++ linear algebra library). The plain R code is a bit slower then pylmm; the C++ code is a bit faster. In the C++ code, almost all of the computation time is devoted to the eigen decomposition of the kinship matrix. Once that&amp;rsquo;s done, the rest is super quick.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Session info from R/Travis</title>
      <link>https://kbroman.org/blog/2015/09/25/session-info-from-rtravis/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kbroman.org/blog/2015/09/25/session-info-from-rtravis/</guid>
      <description>&lt;p&gt;For the problem &lt;a href=&#34;http://kbroman.org/blog/2015/09/24/its-not-you-its-me&#34;&gt;I reported yesterday&lt;/a&gt;, in which my R package was working fine locally but failing on &lt;a href=&#34;http://travis-ci.org&#34;&gt;Travis&lt;/a&gt;, the key solution is to run &lt;code&gt;update.packages(ask=FALSE)&lt;/code&gt; locally, and maybe even &lt;code&gt;update.packages(ask=FALSE, type=&amp;quot;source&amp;quot;)&lt;/code&gt; to be sure to grab the source of packages for which binaries are not yet available. I now know to do that.&lt;/p&gt;

&lt;p&gt;In addition, it&amp;rsquo;d be useful to have session information (R and package versions) in the results from Travis. This has proven a bit tricky.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to go with a fully custom Travis script, your &lt;a href=&#34;http://docs.travis-ci.com/user/customizing-the-build/&#34;&gt;customization options&lt;/a&gt; are limited. We really only care about the case of a failure, so &lt;code&gt;after_success&lt;/code&gt; is not of interest, and &lt;code&gt;after_script&lt;/code&gt; seems not to be run if there&amp;rsquo;s a Travis fail. Moreover, &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;after_failure&lt;/code&gt; are defined by the main &lt;code&gt;language: r&lt;/code&gt; script, so you can&amp;rsquo;t change them without going all-custom.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s left is &lt;code&gt;before_script&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want to see the result of &lt;code&gt;devtools::session_info()&lt;/code&gt; with the package of interest loaded, but the package actually gets built &lt;em&gt;after&lt;/em&gt; &lt;code&gt;before_script&lt;/code&gt; is run, so we&amp;rsquo;ll need to build and install it, even though it&amp;rsquo;ll be built and installed again afterwards. The best I could work out is in &lt;a href=&#34;https://github.com/kbroman/testsysfile/blob/master/.travis.yml#L12-L19&#34;&gt;this example &lt;code&gt;.travis.yml&lt;/code&gt; file&lt;/a&gt;, with the key bits being:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before_script:
  - export PKG_NAME=$(Rscript -e &#39;cat(paste0(devtools::as.package(&amp;quot;.&amp;quot;)$package))&#39;)
  - export PKG_TARBALL=$(Rscript -e &#39;pkg &amp;lt;- devtools::as.package(&amp;quot;.&amp;quot;); cat(paste0(pkg$package,&amp;quot;_&amp;quot;,pkg$version,&amp;quot;.tar.gz&amp;quot;))&#39;)
  - R CMD build --no-build-vignettes .
  - R CMD INSTALL ${PKG_TARBALL}
  - rm ${PKG_TARBALL}
  - echo &amp;quot;Session info:&amp;quot;
  - Rscript -e &amp;quot;library(${PKG_NAME});devtools::session_info(&#39;${PKG_NAME}&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;--no-build-vignettes&lt;/code&gt; in &lt;code&gt;R CMD build&lt;/code&gt; as otherwise the package would be built and installed yet another time. And I remove the &lt;code&gt;.tar.gz&lt;/code&gt; file afterwards, to avoid having the later check complain about the extra file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an &lt;a href=&#34;https://travis-ci.org/kbroman/testsysfile#L850-L864&#34;&gt;example of the session info in the Travis log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have suggests about how to simplify this, I&amp;rsquo;d be happy to hear them. I guess the key would be to have the main Travis script for R revised to report session information.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/jennybryan&#34;&gt;Jenny Bryan&lt;/a&gt; for &lt;a href=&#34;https://twitter.com/JennyBryan/status/647177192514785280&#34;&gt;showing me how to search for instances of &lt;code&gt;session_info&lt;/code&gt; in &lt;code&gt;.travis.yml&lt;/code&gt; files on GitHub&lt;/a&gt;, and to &lt;a href=&#34;https://twitter.com/cpsievert&#34;&gt;Carson Sievert&lt;/a&gt; for &lt;a href=&#34;https://twitter.com/cpsievert/status/647189393162178560&#34;&gt;further moral support&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
